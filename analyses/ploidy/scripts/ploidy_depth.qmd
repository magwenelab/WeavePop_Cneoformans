---
title: "Ploidy detection with read depth"
author: "Claudia Zirión-Martínez"
date: "2025-02-21"
#format: 
#    PrettyPDF-pdf:
#        keep-tex: false
df-print: kable
editor: visual
embed-resources: true
format:
  html:
    code-overflow: wrap
    code-fold: true
---

```{r, output=FALSE}
library(tidyverse)
library(mixtools)
setwd("/FastData/czirion/Crypto_Diversity_Pipeline/analyses/ploidy/scripts")
```

```{r}
sample <- "ERS1142807"
dataset <- "Ashton"
path <- paste("../../../Crypto_", dataset,
    "/results/04.Intermediate_files/01.Samples/depth_quality/",
    sample,
    "/depth_by_windows.tsv",
     sep = "")
```

```{r, results="asis"}
cat(paste("##",sample, "\n"))
```
```{r, output=FALSE}
windows <- read_delim(path,
    delim = "\t",
    col_names = c("accession", "start", "end", "mean_depth", "norm_mean_depth", "smooth_norm_mean_depth"))
```

```{r, output = FALSE}
chrom_names <- read_csv(paste("../../../Crypto_",dataset,"/config/chromosomes.csv", sep =""))
chrom_names <- chrom_names %>%
    mutate(chromosome = str_pad(chromosome, 2, pad = "0"))%>%
    mutate(chromosome = as.factor(chromosome))
levels(chrom_names$chromosome) <- paste("chr", chrom_names$chromosome, sep="")
windows <- left_join(windows, chrom_names, by = "accession") 
```

```{r}
# windows <- windows %>%
#   filter(norm_mean_depth > 0)
```

```{r}
ggplot(windows) +
  geom_histogram(aes(norm_mean_depth), binwidth = 0.01)+
  scale_y_continuous(trans = "log10") +
  scale_x_continuous(breaks = seq(0, max(windows$norm_mean_depth), by = 5),
                    limits = c(0,max(windows$norm_mean_depth) )) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(title = "Complete distribution of normalized mean depth (Log10)",
    y = "Count (Log10 transformation)",
    x = "Normalized mean depth")
```

### Filter

```{r}
#| code-fold: false
max_norm_mean_depth <- 5
```
```{r}
windows_filtered <- windows %>%
    filter(norm_mean_depth < max_norm_mean_depth )
```
```{r}
ggplot(windows_filtered) +
  geom_histogram(aes(norm_mean_depth), binwidth = 0.01) +
  scale_y_continuous(trans = "log10") +
  scale_x_continuous(breaks = seq(0, max(windows_filtered$norm_mean_depth), by = 1),
                      limits = c(0,max(windows_filtered$norm_mean_depth) )) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(title = "Distribution of filtered normalized mean depth (Log10)",
    y = "Count (Log10 transformation)",
    x = "Normalized mean depth")
```
```{r}
ggplot(windows_filtered) +
  geom_histogram(aes(norm_mean_depth), binwidth = 0.01) +
  scale_x_continuous(breaks = seq(0, max(windows_filtered$norm_mean_depth), by = 1),
                      limits = c(0,max(windows_filtered$norm_mean_depth) )) +  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(title = "Distribution of filtered normalized mean depth(raw counts)",
    y = "Count",
    x = "Normalized mean depth")
```

### Fit Gaussian Mixture Models with 2 to 5 components

```{r}
aic_values <- numeric()
bic_values <- numeric()
num_data_points <- length(windows_filtered$norm_mean_depth)
```

```{r}
max_iterations <- 1000
```

Plot with `plot.mixEM()`
```{r}
for (components in 2:5) {

  print(paste("Running EM algorithm with", components, "components."))
  model <- normalmixEM(windows_filtered$norm_mean_depth, k = as.integer(components), maxit = max_iterations, epsilon = 1e-8, arbmean = TRUE, arbvar = TRUE)
  plot(model, loglik=FALSE, density = TRUE, breaks = 400, main2 = paste("k = ", components))
  num_params <- components * 3 - 1  # Number of parameters in the model
  aic_values[components] <- 2 * num_params - 2 * model$loglik
  bic_values[components] <- log(num_data_points) * num_params - 2 * model$loglik
}
```

### BIC and AIC values

```{r}
optimal_k_aic <- which.min(aic_values)
optimal_k_bic <- which.min(bic_values)
```

```{r}
cat("Optimal number of components based on AIC:", optimal_k_aic, "\n")
cat("Optimal number of components based on BIC:", optimal_k_bic, "\n")
```

## Fit Gaussian Mixture Models to each chromosome with 2 to 5 components

```{r}
max_iterations <- 100
```
```{r, error = TRUE, eval = FALSE}
for (chrom in levels(windows_filtered$chromosome)){
  print(paste("Analyzing chromosome", chrom))
  for (component in 2:5) {
  component_name <- paste("k", component, sep = "")
    print(paste("Running EM algorithm with", component, "components for chromosome", chrom))
    windows_filtered_chromosome <- windows_filtered %>%
      filter(chromosome == chrom)
    tryCatch({
    model <- normalmixEM(windows_filtered_chromosome$norm_mean_depth, 
          k = as.integer(component), 
          maxit = max_iterations, 
          epsilon = 1e-8, 
          arbmean = TRUE, arbvar = TRUE)
    plot(model, loglik=FALSE, density = TRUE, breaks = 400, 
            main2 = paste(chrom, " k = ", component))
    }, error = function(e) {
      message(paste("Error in chromosome", chrom, "with", component, "components:", e$message))
    })
  }
}
```

### Fit GMM to each chromosome with 2 to 5 components saving and plotting the best result
```{r, error = TRUE}
for (chrom in levels(windows_filtered$chromosome)){
  print(paste("Analyzing chromosome", chrom))
  aic_values <- numeric()
  bic_values <- numeric()
  models_list <- list()
  for (component in 2:5) {
  component_name <- paste("k", component, sep = "")
    print(paste("Running EM algorithm with", component, "components for chromosome", chrom))
    windows_filtered_chromosome <- windows_filtered %>%
      filter(chromosome == chrom)
    num_data_points <- length(windows_filtered_chromosome$norm_mean_depth)

    tryCatch({
    models_list$component_name <- normalmixEM(windows_filtered_chromosome$norm_mean_depth, 
          k = as.integer(component), 
          maxit = max_iterations, 
          epsilon = 1e-8, 
          arbmean = TRUE, arbvar = TRUE)

      num_params <- component * 3 - 1  # Number of parameters in the model
      bic_values[component] <- log(num_data_points) * num_params - 2 * models_list$component_name$loglik
    }, error = function(e) {
      message(paste("Error in chromosome", chrom, "with", component, "components:", e$message))
    })
  }
  print(paste("BIC values:", bic_values))
  optimal_k_bic <- which.min(bic_values)
  print(paste("K with optimal BIC:", optimal_k_bic))
  component_name <- paste("k", optimal_k_bic, sep = "")
  model <- models_list$component_name
  plot(model, loglik=FALSE, density = TRUE, breaks = 400, 
            main2 = paste(chrom, " k = ", component))
}
```

```{r, eval = FALSE}
chrom_windows_filtered <- windows_filtered %>%
  filter(chromosome == "chr10")%>%
  filter(norm_mean_depth > 0)
```
```{r, eval = FALSE}
ggplot(chrom_windows_filtered) +
  geom_histogram(aes(norm_mean_depth), binwidth = 0.01) +
  scale_x_continuous(breaks = seq(0, max(windows$norm_mean_depth), by = 50)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(title = "Distribution of filtered mean depth(raw counts)",
    y = "Count",
    x = "Normalized normalized mean depth")
```

```{r, eval = FALSE}
components <- 3
max_iterations <- 1000
```
```{r, eval = FALSE}
model <- normalmixEM(chrom_windows_filtered$norm_mean_depth, 
        k = as.integer(components), 
        maxit = max_iterations, 
        epsilon = 1e-8, 
        arbmean = TRUE, arbvar = TRUE)
```

```{r, eval = FALSE}
plot(model, loglik=FALSE, density = TRUE, breaks = 400)
```


```{r, eval = FALSE}
model_data <- data.frame(
  ex = model$x,
  component = apply(model$posterior, 1, which.max)
)
# Create a data frame with the x values and corresponding y values for each distribution
data <- data.frame()

for (i in 1:length(model$mu)) {
  x <- seq(0, model$mu[i] + 10*model$sigma[i], length.out = 100)
  y <- dnorm(x, model$mu[i], model$sigma[i]) * model$lambda[i]
  temp_data <- data.frame(x = x, y = y, component = as.factor(i))
  data <- rbind(data, temp_data)
}

# Plot the lines
ggplot(model_data, aes(x = ex)) +
  geom_histogram(binwidth = 0.01) +
  geom_line(data = data, aes(x = x, y = y, color = component)) +
  labs(title = "Line Plot with Mean, Standard Deviation, and Weight for Each Component",
       x = "X values",
       y = "Density",
       color = "Component") +
  theme_minimal()

```

