---
title: "Ploidy detection with allele frequency of heterozygous variants"
author: "Claudia Zirión-Martínez"
date: "2025-02-14"
#format: 
#    PrettyPDF-pdf:
#        keep-tex: false
df-print: kable
editor: visual
embed-resources: true
format:
  html:
    code-overflow: wrap
    code-fold: true
---
## Process data

### Setup

```{r, output=FALSE}
library(tidyverse)
library(vcfR)
library(pinfsc50)
library(patchwork)
```

```{r, echo=FALSE, eval=FALSE}
setwd("/FastData/czirion/Crypto_Diversity_Pipeline/analyses/ploidy/scripts")
```

[vcfR documentation](https://knausb.github.io/vcfR_documentation/determining_ploidy_1.html)

### Import VCF and metadata

```{r}
sample_id <- "SRS885877"
```
```{r, output=FALSE, message=FALSE, eval=TRUE, echo=TRUE}
# For Desjardins sample:

vcf <- read.vcfR(paste(
    "/FastData/czirion/Crypto_Diversity_Pipeline/Crypto_Desjardins/results/01.Samples/snippy/",
    sample_id, "/snps.raw.vcf", sep = ""))
metadata <- read_csv("../../../Crypto_Desjardins/config/metadata.csv")
metadata <- metadata %>%
    select(sample, strain, lineage)%>%
    filter(sample == sample_id)
chrom_names <- read_csv("../../../Crypto_Desjardins/config/chromosomes.csv")
chrom_names <- chrom_names %>%
    mutate(chromosome = str_pad(chromosome, 2, pad = "0"))%>%
    mutate(chromosome = as.factor(chromosome))
levels(chrom_names$chromosome) <- paste("chr", chrom_names$chromosome, sep="")
chrom_names <- inner_join(chrom_names, metadata, by = "lineage") 
```

```{r}
metadata
```

```{r,output=FALSE, eval=FALSE, echo=FALSE}
# For Ashton sample:
vcf <- read.vcfR(paste(
    "/FastData/czirion/Crypto_Diversity_Pipeline/Crypto_Ashton/results/01.Samples/snippy/",
    sample_id, "/snps.raw.vcf", sep = ""))
```
```{r,output=FALSE, eval=FALSE, echo = FALSE}
# For North Carolina sample:
vcf <- read.vcfR(paste(
    "/FastData/kwilhoit/DiversityPipeline_NorthCarolina/results/sample/snippy/",
    sample_id, "/snps.raw.vcf", sep = ""))
```

### Extract VCF info
Convert the VCF file into a dataframe, select the useful columns and add the chromosome names.
```{r, output = FALSE}
tidy_vcf <- vcfR2tidy(vcf)

vars <- tidy_vcf$fix %>%
    select(ChromKey, CHROM, POS, REF, ALT,
            QUAL, DP, RO, AO, AB, NUMALT, MQM, MQMR, PAIRED, PAIREDR)
meta <- tidy_vcf$meta %>%
    filter(ID %in% c("QUAL", "DP", "RO", "AO",  "AB",  "NUMALT", "MQM", "MQMR", "PAIRED", "PAIREDR"))%>%
    as.data.frame()
gt <- tidy_vcf$gt %>%
    select(Indiv, ChromKey, POS, GT = gt_GT)
vars <- left_join(vars, gt, by = c("ChromKey", "POS"))
vars <- left_join(vars, chrom_names, by = c("CHROM" = "accession"))
```

## Explore raw variants
For each genotype identify in how many variants one of the alleles is the reference allele and how many only have alternate alleles.

```{r, message=FALSE}
vars %>%
    mutate(R = ifelse(RO == 0 , "no_ref_allele", "ref_allele"))%>%
    group_by(GT, R, NUMALT)%>%
    summarize(n = n())
```

## Reference-Alternate Variants
Explore the variants where there is only one alternative allele and the reference allele is present.  
```{r}
refalt <-vars %>%
    filter(NUMALT == 1)%>%
    filter(RO != 0)%>%
    mutate(RO = as.numeric(RO),
            AO = as.numeric(AO),
            AB = as.numeric (AB))%>%
    mutate(DPA = RO + AO,
            DPC = DP - DPA,
            RB = RO/DPA,
            TB = RB + AB,
            RF = RO/DPA,
            AF = AO/DPA,
            TF = RF + AF,
            MJAF = pmax(AF, RF, na.rm=TRUE),
            MAF = pmin(AF, RF, na.rm=TRUE))%>%
    select(sample, lineage, strain, chromosome,
            POS, REF, ALT, QUAL, GT,
            DP, DPA, DPC,
            RO, AO,
            RB, AB, TB, 
            RF, AF, TF, MAF, MJAF,
            MQM, MQMR, PAIRED, PAIREDR)
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
rfp <- ggplot(refalt) +
    geom_histogram(aes(RF), binwidth = 0.01)+
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    labs(title = "Reference allele frequency",
            subtitle = paste("Number of variants:", nrow(refalt)),
         x = "Frequency",
         y = "Counts")+
    theme_classic()
afp <- ggplot(refalt) +
    geom_histogram(aes(AF), binwidth = 0.01)+
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
        labs(title ="Alternate allele frequency",
            subtitle = paste("Number of variants:", nrow(refalt)),
            x = "Frequency",
            y = "Counts")+
    theme_classic()

rfp / afp
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(refalt) +
    geom_histogram(aes(RF, fill = "R"), binwidth = 0.01)+
    geom_histogram(aes(AF, fill = "A1"), binwidth = 0.01)+
    facet_wrap(~GT, ncol =1, scales = "free_y")+
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    labs(title = "Frequency of reference and alternate alleles by genotype",
        subtitle = paste("Number of variants:", nrow(refalt)),
         x = "Frequency",
         y = "Counts")
```
There are many variants where the reference allele is present in very low frequency. They are usually assigned to homozygous genotypes.

### Filter Ref-Alt sites
Remove the low variant quality, low depth and homozygous genotypes.
```{r}
refalt_filtered <- refalt %>%
    filter(QUAL >= 100)%>%
    filter(DP >= 10) %>%
    filter(!GT %in% c( "1/1", "0/0"))
```
```{r, message=FALSE}
refalt_filtered %>%
    mutate(R = ifelse(RO == 0 , "no_ref_allele", "ref_allele"))%>%
    group_by(GT, R)%>%
    summarize(n = n())
```
Check if there is a bias toward the reference or alternate alleles.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
rfp <- ggplot(refalt_filtered) +
    geom_histogram(aes(RF), binwidth = 0.01)+
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    labs(title = "Reference allele frequency",
        subtitle = paste("Number of variants:", nrow(refalt_filtered)),
         x = "Frequency",
         y = "Counts")+
    theme_classic()
afp <- ggplot(refalt_filtered) +
    geom_histogram(aes(AF), binwidth = 0.01)+
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
        labs(title ="Alternate allele frequency",
            subtitle = paste("Number of variants:", nrow(refalt_filtered)),
            x = "Frequency",
            y = "Counts")+
    theme_classic()

rfp / afp
```

Check the genome-wide major and minor allele frequency.
```{r}
refalt_stats <- refalt_filtered %>%
    summarise(
        median_MJAF = median(MJAF, na.rm = TRUE),
        mean_MJAF = mean(MJAF, na.rm = TRUE),
        sd_MJAF = sd(MJAF, na.rm = TRUE),
        median_MAF = median(MAF, na.rm = TRUE),
        mean_MAF = mean(MAF, na.rm = TRUE),
        sd_MAF = sd(MAF, na.rm = TRUE))
```
```{r, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(refalt_filtered) +
    geom_histogram(aes(MAF, fill = "MAF"), binwidth = 0.01)+
    geom_histogram(aes(MJAF, fill = "MJAF"), binwidth = 0.01)+
    geom_vline(data = refalt_stats, aes(xintercept = median_MJAF), color = "black", linetype = "solid", linewidth = 1) +
    geom_text(data = refalt_stats, aes(x = median_MJAF, y = Inf, label = round(median_MJAF, 2)), vjust = 2, hjust = 1.5, size = 7) +
    geom_vline(data = refalt_stats, aes(xintercept = median_MAF), color = "black", linetype = "solid", linewidth= 1) +
    geom_text(data = refalt_stats, aes(x = median_MAF, y = Inf, label = round(median_MAF, 2)), vjust = 2, hjust = 1.5, size = 7) +
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    scale_fill_manual(values = c("MAF" = "lightblue", "MJAF" = "darkblue"), name = "Allele")+
    labs(title = "Minor and Major Allele Frequencies",
    subtitle = paste("Number of variants:", nrow(refalt_filtered)),
         x = "Frequency",
         y = "Counts")+
    theme_classic()
```
Check the major and minor allele frequencies by chromosome.
```{r}
refalt_stats_chrom <- refalt_filtered %>%
    group_by(chromosome)%>%
    summarise(
        median_MJAF = median(MJAF, na.rm = TRUE),
        mean_MJAF = mean(MJAF, na.rm = TRUE),
        sd_MJAF = sd(MJAF, na.rm = TRUE),
        median_MAF = median(MAF, na.rm = TRUE),
        mean_MAF = mean(MAF, na.rm = TRUE),
        sd_MAF = sd(MAF, na.rm = TRUE))
```

```{r, message=FALSE, warning=FALSE}
#| fig-height: 7
#| fig-width: 7
#| fig-align: center
ggplot(refalt_filtered) +
    geom_histogram(aes(MAF, fill = "MAF"), binwidth = 0.01)+
    geom_histogram(aes(MJAF, fill = "MJAF"), binwidth = 0.01)+
    facet_wrap(~chromosome, strip.position = "right", ncol = 2)+
    geom_vline(data = refalt_stats_chrom, aes(xintercept = median_MJAF), color = "black", linetype = "solid", linewidth = 1) +
    geom_text(data = refalt_stats_chrom, aes(x = median_MJAF, y = Inf, label = round(median_MJAF, 2)), vjust = 2, hjust = -0.5, size = 3) +
    geom_vline(data = refalt_stats_chrom, aes(xintercept = median_MAF), color = "black", linetype = "solid", linewidth= 1) +
    geom_text(data = refalt_stats_chrom, aes(x = median_MAF, y = Inf, label = round(median_MAF, 2)), vjust = 2, hjust = 1.5, size = 3) +
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    scale_fill_manual(values = c("MAF" = "lightblue", "MJAF" = "darkblue"), name = "Allele")+
    labs(title = "Minor and Major Allele Frequencies per Chromosome",
        subtitle = paste("Number of variants:", nrow(refalt_filtered)),
         x = "Frequency",
         y = "Counts")+
      theme(panel.grid = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.background = element_blank(),
        panel.border = element_rect(colour = "lightgray", fill=NA, linewidth = 2))
```

Check if there is a pattern in the localization of the Ref-Alt sites along the chormosomes.
```{r}
#| fig-height: 10
#| fig-width: 7
#| fig-align: center
ggplot(refalt_filtered) +
    # geom_point(aes(x=POS, y=MAF), color = "lightblue") +
    geom_col(aes(x=POS, y=MAF, color = MAF)) +
    facet_wrap(~chromosome, strip.position = "right", ncol = 2, scales = "free_x")+
    scale_y_continuous(breaks = c(0, 0.25, 0.333, 0.5),
                       labels = c(0, "1/4", "1/3", "1/2"),
                        limits = c(-0.01, 0.51))+
    labs(title = "Minor Allele Frequency Along Chromosomes",
        subtitle = paste("Number of variants:", nrow(refalt_filtered)),
         x = "Position",
         y = "MAF")+
    theme(panel.background = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_line(color = "black", linetype="solid", linewidth=0.5)
    )
```

## Multiallelic variants
Multiallelic variants are those with more than one alternate allele.   
Obtain them, split the stats that are currently in same column and calculate the relevant metrics.
```{r}
multiallelic <-vars %>%
    filter(NUMALT > 1)

ao_split <- str_split_fixed(multiallelic$AO, ",", n = max(str_count(multiallelic$AO, ",") + 1))
ab_split <- str_split_fixed(multiallelic$AB, ",", n = max(str_count(multiallelic$AB, ",") + 1))
p_split <- str_split_fixed(multiallelic$PAIRED, ",", n = max(str_count(multiallelic$PAIRED, ",") + 1))
m_split <- str_split_fixed(multiallelic$MQM, ",", n = max(str_count(multiallelic$MQM, ",") + 1))

ao_split_df <- as.data.frame(ao_split)
ab_split_df <- as.data.frame(ab_split)
p_split_df <- as.data.frame(p_split)
m_split_df <- as.data.frame(m_split)

colnames(ao_split_df) <- paste0("AO_", seq_len(ncol(ao_split_df)))
colnames(ab_split_df) <- paste0("AB_", seq_len(ncol(ab_split_df)))
colnames(p_split_df) <- paste0("PAIRED_", seq_len(ncol(p_split_df)))
colnames(m_split_df) <- paste0("MQM_", seq_len(ncol(m_split_df)))

multiallelic_split <- cbind(multiallelic, ao_split_df, ab_split_df, p_split_df, m_split_df)

multiallelic_split <- multiallelic_split %>%
    mutate(RO = as.numeric(RO),
            across(starts_with("AO_"), as.numeric),
            across(starts_with("AB_"), as.numeric))%>%
    mutate(DPA = RO + rowSums(across(starts_with("AO_")), na.rm = TRUE),
            DPC = DP - DPA,
            RB = RO/DPA,
            TB = RB + rowSums(across(starts_with("AB_")), na.rm = TRUE),
            across(starts_with("AO_"), ~ .x / DPA, .names = "AF_{str_remove(col, 'AO_')}"),
            RF = RO/DPA,
            TF = RF + rowSums(across(starts_with("AF_")), na.rm = TRUE))%>%
    select(chromosome, POS, REF, ALT, QUAL, GT, NUMALT,
            DP, DPA, DPC, 
            RO, AO, starts_with("AO_"),
            RB, AB, starts_with("AB_"), TB, 
            RF, starts_with("AF_"), TF,
            MQM, MQMR, PAIRED, PAIREDR)
```

For each genotype identify in how many variants one of the alleles is the reference allele and how many only have alternate alleles.

```{r, message=FALSE}
multiallelic_split %>%
    mutate(R = ifelse(RO == 0 , "no_ref_allele", "ref_allele"))%>%
    group_by(GT, R, NUMALT)%>%
    summarize(n = n())
```

Check if there is a bias of the reference allele in each genotype.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(multiallelic_split) +
    geom_histogram(aes(RF, fill = "R"), binwidth = 0.01)+
    geom_histogram(aes(AF_1, fill = "A1"), binwidth = 0.01)+
    geom_histogram(aes(AF_2, fill = "A2"), binwidth = 0.01)+
    geom_histogram(aes(AF_3, fill = "A3"), binwidth = 0.01)+
    facet_wrap(~GT, ncol =1, scales = "free_y")+
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    labs(title = "Frequency of reference and alternate alleles",
        subtitle = paste("Number of variants:", nrow(multiallelic_split)),
         x = "Frequency",
         y = "Counts")
```

### Filter the multiallelic varitants
Remove the low variant quality, low depth.
```{r}
multiallelic_filtered <- multiallelic_split %>%
    filter(QUAL >= 100)%>%
    filter(DP >= 10)
```
```{r, message=FALSE}
multiallelic_filtered %>%
    mutate(R = ifelse(RO == 0 , "no_ref_allele", "ref_allele"))%>%
    group_by(GT, R, NUMALT)%>%
    summarize(n = n())
```
Remove columns with only NA values.
```{r}
multiallelic_filtered <- multiallelic_filtered %>%
    select(where(~ !all(is.na(.))))
```

```{r, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
p <- ggplot(multiallelic_filtered) +
        geom_histogram(aes(RF, fill = "R"), binwidth = 0.01)+
        geom_histogram(aes(AF_1, fill = "A1"), binwidth = 0.01)+
        geom_histogram(aes(AF_2, fill = "A2"), binwidth = 0.01)+
        facet_wrap(~GT, ncol =1, scales = "free_y")+
        scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                        labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                            limits = c(-0.01, 1.01))+
        labs(title = "Frequency of reference and alternate alleles",
            subtitle = paste("Number of variants:", nrow(multiallelic_filtered)),
            x = "Frequency",
            y = "Counts")


if ("AF_3" %in% names(multiallelic_filtered)) {
    p <- p +
        geom_histogram(aes(AF_3, fill = "A3"), binwidth = 0.01)
    }
p
```

## Alternate-Alternate Variants

Explore only the heterozygous variants "1/2" where the reference allele is not present.

```{r}
altalt <- multiallelic_split %>%
    filter(RF == 0)%>%
    filter(GT == "1/2")
```

Calculate the MAF and MJAF
```{r}
altalt <- altalt %>%
    filter(GT == "1/2")%>%
    mutate(MJAF = pmax(AF_1, AF_2, na.rm=TRUE),
            MAF = pmin(AF_1, AF_2, na.rm=TRUE))
```

```{r}
altalt_stats <- altalt %>%
    summarise(
        median_MJAF = median(MJAF, na.rm = TRUE),
        mean_MJAF = mean(MJAF, na.rm = TRUE),
        sd_MJAF = sd(MJAF, na.rm = TRUE),
        median_MAF = median(MAF, na.rm = TRUE),
        mean_MAF = mean(MAF, na.rm = TRUE),
        sd_MAF = sd(MAF, na.rm = TRUE))
```
```{r, message=FALSE, warning=FALSE}
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(altalt) +
    geom_histogram(aes(MAF, fill = "MAF"), binwidth = 0.01)+
    geom_histogram(aes(MJAF, fill = "MJAF"), binwidth = 0.01)+
    geom_vline(data = altalt_stats, aes(xintercept = median_MJAF), color = "black", linetype = "solid", linewidth = 1) +
    geom_text(data = altalt_stats, aes(x = median_MJAF, y = Inf, label = round(median_MJAF, 2)), vjust = 2, hjust = 1.5, size = 7) +
    geom_vline(data = altalt_stats, aes(xintercept = median_MAF), color = "black", linetype = "solid", linewidth= 1) +
    geom_text(data = altalt_stats, aes(x = median_MAF, y = Inf, label = round(median_MAF, 2)), vjust = 2, hjust = 1.5, size = 7) +
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    scale_fill_manual(values = c("MAF" = "lightblue", "MJAF" = "darkblue"), name = "Allele")+
    labs(title = "Major and Minor Allele Frequency",
        subtitle = paste("Number of variants:", nrow(altalt)),
         x = "Frequency",
         y = "Counts")
```
Check the major and minor allele frequencies by chromosome.

```{r}
altalt_stats_chrom <- altalt %>%
    group_by(chromosome)%>%
    summarise(
        median_MJAF = median(MJAF, na.rm = TRUE),
        mean_MJAF = mean(MJAF, na.rm = TRUE),
        sd_MJAF = sd(MJAF, na.rm = TRUE),
        median_MAF = median(MAF, na.rm = TRUE),
        mean_MAF = mean(MAF, na.rm = TRUE),
        sd_MAF = sd(MAF, na.rm = TRUE))
```
```{r, message=FALSE, warning=FALSE}
#| fig-height: 7
#| fig-width: 7
#| fig-align: center
ggplot(altalt) +
    geom_histogram(aes(MAF, fill = "MAF"), binwidth = 0.01)+
    geom_histogram(aes(MJAF, fill = "MJAF"), binwidth = 0.01)+
    facet_wrap(~chromosome, strip.position = "right", ncol = 2)+
    geom_vline(data = altalt_stats_chrom, aes(xintercept = median_MJAF), color = "black", linetype = "solid", linewidth = 1) +
    geom_text(data = altalt_stats_chrom, aes(x = median_MJAF, y = Inf, label = round(median_MJAF, 2)), vjust = 2, hjust = -0.5, size = 3) +
    geom_vline(data = altalt_stats_chrom, aes(xintercept = median_MAF), color = "black", linetype = "solid", linewidth= 1) +
    geom_text(data = altalt_stats_chrom, aes(x = median_MAF, y = Inf, label = round(median_MAF, 2)), vjust = 2, hjust = 1.5, size = 3) +
    scale_x_continuous(breaks = c(0, 0.25, 0.333, 0.5, 0.666, 0.75, 1),
                       labels = c(0, "1/4", "1/3", "1/2", "2/3", "3/4", 1),
                        limits = c(-0.01, 1.01))+
    scale_fill_manual(values = c("MAF" = "lightblue", "MJAF" = "darkblue"), name = "Allele")+
    labs(title = "Minor and Major Allele Frequencies per Chromosome",
        subtitle = paste("Number of variants:", nrow(altalt)),
         x = "Frequency",
         y = "Counts")+
      theme(panel.grid = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.background = element_blank(),
        panel.border = element_rect(colour = "lightgray", fill=NA, linewidth = 2))

```

Check if there is a pattern in the localization of the Alt-Alt sites along the chormosomes.

```{r, message=FALSE, warning=FALSE}
#| fig-height: 10
#| fig-width: 7
#| fig-align: center
ggplot(altalt) +
    geom_col(aes(x=POS, y=MAF, color = MAF)) +
    facet_wrap(~chromosome, strip.position = "right", ncol = 2, scales="free_x")+
    scale_y_continuous(breaks = c(0, 0.25, 0.333, 0.5),
                       labels = c(0, "1/4", "1/3", "1/2"))+
    labs(title = "Minor Allele Frequency Along Chromosomes",
        subtitle = paste("Number of variants:", nrow(altalt)),
         x = "Position",
         y = "MAF")+
    theme(panel.background = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_line(color = "black", linetype="solid", linewidth=0.5)
    )
```