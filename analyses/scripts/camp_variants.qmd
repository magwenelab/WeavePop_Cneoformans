---
title: "Identification of Variants in the cAMP pathway"
author: "Claudia Zirión-Martínez"
date: "2025-05-23"

fig-height: 7
fig-width: 9

format: 
  html:
    page-layout: full
---

## Query cAMP variants and annotation

Use WeavePop-CLI to get the annotation of the mRNA features of the cAMP genes and the variants of all samples in those genes.

* PDE1  
* PKA1  
* PKA2  
* CAC1  
* PKR1  

```{bash, eval=FALSE}
#| code-fold: false
conda activate shiny
python query_database/weavepop_cli.py annotation --db Crypto_Desjardins_Ashton/results/02.Dataset/database.db --gene_name PDE1,PKA1,PKA2,CAC1,PKR1 --feature_type mRNA > analyses/data/processed/variants/camp_annotation.tsv
python query_database/weavepop_cli.py variants --db Crypto_Desjardins_Ashton/results/02.Dataset/database.db --gene_name PDE1,PKA1,PKA2,CAC1,PKR1 > analyses/
data/processed/variants/camp_variants.tsv
```

## Setup {#setup}

```{r, eval=FALSE, echo=FALSE}
setwd("/FastData/czirion/WeavePop_Cneoformans/analyses")
```

Libraries

```{r libraries, output=FALSE}
library(tidyverse)
library(patchwork)
library(ggnewscale)
library(RColorBrewer)
library(svglite)
```

Paths

Use the metadata table generated by `analyses/scripts/metadata.ipynb`  
and the `cnv_chromosomes.tsv` of the joined dataset generated by WeavePop.
```{r paths}
metadata_path <-
    "data/processed/metadata_ashton_desj_all_weavepop_H99.csv"
cnv_chroms_path <-
    "../Crypto_Desjardins_Ashton/results/02.Dataset/cnv/cnv_chromosomes.tsv"
annotation_path <- "data/processed/variants/camp_annotation.tsv"
variants_path <- "data/processed/variants/camp_variants.tsv"
```

## Explore the annotation

```{r}
annotation <- read.delim(
    annotation_path,
    header=TRUE,
    sep="\t",
    stringsAsFactor = TRUE)
```

Number of isoforms per lineage per gene

```{r}
annotation %>% 
    group_by(lineage, gene_name)%>%
    summarize(n_isoforms = n_distinct(feature_id))%>%
    pivot_wider(names_from = gene_name, values_from = n_isoforms)
```

Isoforms identical to VNI
```{r}
annotation %>% 
    select(lineage, gene_name, feature_id, identical_to_main_ref, start_stop_mutations)%>%
    arrange(lineage, gene_name)
```
The VNII reference has a `missing_start_codon` in CAC1 and a `missing_stop_codon` in PDE1 mR2.

## Explore the number of variants
```{r}
variants <- read.delim(
    variants_path,
    header=TRUE,
    sep="\t",
    stringsAsFactor = TRUE)

variants$impact <- factor(variants$impact, levels = c("HIGH", "MODERATE", "LOW", "MODIFIER"))
variants$lineage <- factor(variants$lineage, levels = c("VNI", "VNII", "VNBI", "VNBII"))
```
```{r, message = FALSE, warning = FALSE}
variants %>%
    group_by(lineage, impact, gene_name)%>%
    summarize(n_vars = n_distinct(var_id))%>%
    pivot_wider(names_from = gene_name, values_from = n_vars)%>%
    arrange(impact, lineage)
```
```{r, message = FALSE, warning = FALSE}
variants %>%
    group_by(lineage, impact, gene_name)%>%
    summarize(n_samples = n_distinct(sample))%>%
    pivot_wider(names_from = gene_name, values_from = n_samples, values_fill = 0)%>%
    arrange(impact, lineage)
```
```{r, message = FALSE, warning = FALSE}
variants %>%
    group_by(lineage, var_id)%>%
    summarize(n_samples = n_distinct(sample))%>%
    arrange(desc(n_samples))
```
## Prepare dataset {#prepare-dataset}

### Metadata {#metadata}

Use the metadata table that has all the samples included in the final **Crypto_Desjardins_Ashton** dataset (n = 1055) and H99.  
Select needed columns, remove H99 and get the number of samples per dataset and lineage, per lineage, per lineage and source and total.

```{r, message=FALSE, warning=FALSE}
metadata <- read.delim(
    metadata_path,
    header=TRUE,
    sep=",",
    stringsAsFactor = TRUE)
metadata <- metadata %>%
    select(sample, strain, source, lineage, dataset, vni_subdivision)%>%
    filter(!strain == "H99") %>%
    group_by(dataset, lineage)%>%
    mutate(samples_in_dataset_lineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(lineage)%>%
    mutate(samples_in_lineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(vni_subdivision)%>%
    mutate(samples_in_sublineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(lineage,source,samples_in_lineage) %>%
    mutate(samples_in_lineage_source = n_distinct(sample))%>%
    ungroup()%>%
    mutate(total_samples = n_distinct(sample))%>%
    droplevels()
```
