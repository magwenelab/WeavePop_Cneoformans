---
title: "Explore Distribution of CNVs and Chromosome Depth"
author: "Claudia Zirión-Martínez"
date: "2025-02-13"

fig-height: 7
fig-width: 9

format: 
  html:
    page-layout: full
---

## Index
- [Setup](#setup)
- [Prepare dataset](#prepare-dataset)
    - [Metadata](#metadata)
    - [Chromosome names and length](#chromosome-names-and-length)
    - [Called CNVs](#called-cnvs)
        - [Filter out high depth dupCNVs](#filter-high-depth-dupcnvs)
        - [Filter out high repeat content CNVs](#filter-out-high-repeat-content-cnvs)
- [Chromosome depth](#chromosome-depth)
- [Combine all information](#combine-all-information)
    - [Summarize the metrics of the called CNVs per chromosome](#summarize-the-metrics-of-the-called-cnvs-per-chromosome)
- [Explore Called CNVs](#explore-called-cnvs)
    - [Repeats](#repeats)
        - [Distribution of Repeat Fraction](#distribution-of-repeat-fraction)
    - [Depth](#depth)
        - [Distribution of Normalized Depth and Smooth Normalized Depth](#distribution-of-normalized-depth-and-smooth-normalized-depth)
        - [Normalized Depth vs. Smooth Normalized Depth](#normalized-depth-vs-smooth-normalized-depth)
    - [Size](#size)
        - [Distribution of Sizes of CNVs](#distribution-of-sizes-of-cnvs)
        - [Depth vs. Size](#depth-vs-size)
- [Explore dupCNVs](#explore-duplications)
    - [Depth vs. Repeats per Chromosome](#depth-vs-repeats-per-chromosome)
- [Explore depth of chromosomes](#median-depth-of-chromosomes)
    - [Number of dupCNVs](#number-of-dupcnvs)
    - [Percentage of chromosome Covered by dupCNVs](#percentage-of-chromosome-covered-by-dupcnvs)
    - [Percentage of chromosome Spanned by dupCNVs](#percentage-of-chromosome-spanned-by-dupcnvs)
    - [Explore relationship between CNV chromosomal metrics](#explore-relationship-between-cnv-chromosomal-metrics)
- [Compare metrics of dupCNVs with chromosome depth](#compare-metrics-of-dcnvs-with-chromosome-depth)
- [Write tables](#write-tables)

## Setup {#setup}

```{r, eval=FALSE, echo=FALSE}
setwd("/FastData/czirion/WeavePop_Cneoformans/analyses")
```

Libraries

```{r libraries, output=FALSE}
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(ggnewscale)
library(RColorBrewer)
library(hexbin)
library(ggExtra)
library(ggrepel)
```

Paths

```{r paths}
metadata_path <-
    "data/processed/metadata_ashton_desj_all_weavepop_H99.csv"
chromosomes_path <-
    "../Crypto_Desjardins/results/04.Intermediate_files/03.References/chromosome_lengths.tsv"
depth_by_chrom_good_desj_path <-
    "../Crypto_Desjardins/results/04.Intermediate_files/02.Dataset/depth_quality/depth_by_chrom_good.tsv"
depth_by_chrom_good_ashton_path <-
    "../Crypto_Ashton/results/04.Intermediate_files/02.Dataset/depth_quality/depth_by_chrom_good.tsv"
cnv_calls_path <-
    "../Crypto_Desjardins_Ashton/results/02.Dataset/cnv_0.6/cnv_calls.tsv"
chrom_metrics_out_path <-
    "results/tables/chrom_metrics.tsv"
chrom_metrics_filtered_out_path <- 
    "results/tables/chrom_metrics_filtered.tsv"
```

## Prepare dataset {#prepare-dataset}

### Metadata {#metadata}

Use the metadata table that has all the samples included in the final Crypto_Desjardins_Ashton dataset (n = 1055) and H99.  
Select needed columns, remove H99 and get the number of samples per dataset and lineage, per lineage, and total.

```{r, message=FALSE, warning=FALSE}
metadata <- read.delim(
    metadata_path,
    header=TRUE,
    sep=",",
    stringsAsFactor = TRUE)
metadata <- metadata %>%
    select(sample, strain, source, lineage, dataset, vni_subdivision)%>%
    filter(!strain == "H99") %>%
    group_by(dataset, lineage)%>%
    mutate(samples_in_dataset_lineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(lineage)%>%
    mutate(samples_in_lineage = n_distinct(sample))%>%
    ungroup()%>%
    mutate(total_samples = n_distinct(sample))%>%
    droplevels()
```

### Chromosome names and length {#chromosome-names-and-length}

Get the nice chromosome names from the chromosomes file in WeavePop.

```{r}
chromosomes = read.delim(
    chromosomes_path,
    header=TRUE, sep=",") %>%
    mutate(chromosome = str_pad(chromosome, 2, pad = "0"))%>%
    mutate(chromosome = as.factor(chromosome))
levels(chromosomes$chromosome) <- paste("chr", chromosomes$chromosome, sep="")

chromosomes <- chromosomes %>%
    arrange(lineage, length)
```

Lineage VNII is the only one in which chromosome names coincide with the length (chr01 largest, chr14 smallest).

### Called CNVs {#called-cnvs}

Import the file with all called CNVs and add to it the chromosome information.  

```{r}
cnv_calls <- read.delim(
    cnv_calls_path, 
    header=TRUE, sep="\t")%>%
    left_join(chromosomes, by="accession")
```

Create the single-copy regions
```{r}
regions <- cnv_calls %>%
    select(sample, lineage, accession, chromosome, cnv, start, end, length) %>%
    arrange(sample, chromosome, start) %>%
    group_by(sample, chromosome) %>%
    mutate(
        next_start = lead(start),
        new_start = end + 1,
        new_end = next_start - 1
    ) %>%
    filter(new_start <= length) %>%
    select(sample,lineage, accession, chromosome, start = new_start, end = new_end, length) %>%
    mutate(cnv = "single_copy",
            end = if_else(is.na(end), length, end),
            region_size = end - start)%>%
    bind_rows(cnv_calls)%>%
    arrange(sample, chromosome, start)
```

Create the depth thresholds used to identify deletions and duplications.
```{r}
#| code-fold: false
depth_threshold <- 0.6
del_threshold <- 1 - depth_threshold
dup_threshold <- 1 + depth_threshold
```

Create dataframe for the called duplications only dupCNVs.

```{r}
dup_calls <- filter(cnv_calls, cnv == "duplication")
```

#### Filter out high depth dupCNVs {#filter-high-depth-dupcnvs}

To filter out the dupCNVs that have very large Normalized Depth. Here I make groups of CNVs that start at the same position in the same chromosome.

```{r, output= FALSE}
dup_groups <- dup_calls %>%
    group_by(lineage, chromosome, start, end, region_size) %>%
    summarize(max_depth = max(norm_depth),
              median_depth = median(norm_depth),
              n = n(),
              median_repeat = median(repeat_fraction))
```

The dupCNVs groups with max depth larger than `extreme_depth`:

```{r}
#| code-fold: false
extreme_depth <- 5
```
```{r}
large_dups <- dup_groups %>%
                        filter((max_depth > extreme_depth))%>%
                        arrange(desc(n))
head(large_dups)
```

Filter out duplications that are part of the groups in the previous table.  
This way of filtering removes individual CNVs that not necessarily have depth grater than 5 but other samples in the lineage have a high depth CNV in the same region.

```{r}
dup_calls_filter_depth <- dup_calls %>%
    filter(!paste(start, end, chromosome, lineage) %in% 
           paste(large_dups$start, large_dups$end, large_dups$chromosome, large_dups$lineage))
```

#### Filter out high repeat content CNVs

```{r}
#| code-fold: false
repeat_threshold = 0.25
```

```{r}
repetitive_dups <- dup_groups %>%
                        filter((median_repeat > 0.25))%>%
                        arrange(desc(n))
```

```{r}
dup_calls_filtered <- dup_calls_filter_depth %>%
    filter(!paste(start, end, chromosome, lineage) %in% 
           paste(repetitive_dups$start, repetitive_dups$end, 
                repetitive_dups$chromosome, repetitive_dups$lineage))
```

## Chromosome depth

```{r}
depth_by_chrom_good_desjardins <- read.delim(
    depth_by_chrom_good_desj_path,
     header=TRUE, sep="\t")
depth_by_chrom_good_ashton <- read.delim(
    depth_by_chrom_good_ashton_path,
     header=TRUE, sep="\t")
depth_by_chrom <- rbind(depth_by_chrom_good_desjardins, depth_by_chrom_good_ashton)%>%
    select(sample, accession, norm_chrom_mean, norm_chrom_median)%>%
    left_join(chromosomes, by = "accession")

head(depth_by_chrom)
```


## Combine all information

The following dataframes contain a row per individual called duplication with the information about the CNV and the chromosome of the sample. 
For the chromosome-sample without any called duplication, the columns related to CNVs have NAs.  
`all_metrics` is created with all dupCNVs. `all_metrics_filtered` with the dupCNVs filtered by depth and repeat fraction.

```{r}
all_metrics <- left_join(depth_by_chrom, dup_calls,
        by = c("sample", "lineage", "accession", "chromosome",  "length"))%>%
    left_join(metadata, by = c("sample", "lineage"))
head(all_metrics)
```
```{r}
all_metrics_filtered <- left_join(depth_by_chrom, dup_calls_filtered,
        by = c("sample", "lineage", "accession", "chromosome",  "length"))%>%
    left_join(metadata, by = c("sample", "lineage"))
```

### Summarize the metrics of the called CNVs per chromosome {#summarize-the-metrics-of-the-called-cnvs-per-chromosome}

And keep the rest of the chromosome metrics.

```{r, message=FALSE}
chrom_metrics <- all_metrics %>%
    group_by(sample, strain, lineage, 
            accession, chromosome, length,
            source, vni_subdivision, dataset,
            samples_in_lineage, samples_in_dataset_lineage, 
            total_samples, 
            norm_chrom_mean, norm_chrom_median)%>%
    summarise(total_cnv_size = sum(region_size, na.rm = TRUE),
                n_cnvs = sum(!is.na(cnv)), 
                first = min(start),
                last = max(end),
                mean_cnv_depth = round(mean(norm_depth),2),
                median_cnv_depth = round(median(norm_depth),2),
                repeat_size = sum(overlap_bp)) %>%
            ungroup()%>%
    mutate(dup_coverage_percent = round((total_cnv_size / length) * 100, 2),
            dup_span_size = ifelse(is.na(last - first), 0, last - first),
            dup_span_percent = round((dup_span_size / length) * 100, 2),
            dup_repeat_percent = round((repeat_size / length) * 100, 2),
            chromosome = as.factor(chromosome),
            dup_coverage_percent = ifelse(is.na(dup_coverage_percent), 0, dup_coverage_percent),
            dup_span_percent = ifelse(is.na(dup_span_percent), 0, dup_span_percent))
head(chrom_metrics)
```
```{r, message=FALSE}
chrom_metrics_filtered <- all_metrics_filtered %>%
    group_by(sample, strain, lineage, 
            accession, chromosome, length,
            source, vni_subdivision, dataset,
            samples_in_lineage, samples_in_dataset_lineage, 
            total_samples, 
            norm_chrom_mean, norm_chrom_median)%>%
    summarise(total_cnv_size = sum(region_size, na.rm = TRUE),
                n_cnvs = sum(!is.na(cnv)), 
                first = min(start),
                last = max(end),
                mean_cnv_depth = round(mean(norm_depth),2),
                median_cnv_depth = round(median(norm_depth),2),
                repeat_size = sum(overlap_bp)) %>%
            ungroup()%>%
    mutate(dup_coverage_percent = round((total_cnv_size / length) * 100, 2),
            dup_span_size = ifelse(is.na(last - first), 0, last - first),
            dup_span_percent = round((dup_span_size / length) * 100, 2),
            dup_repeat_percent = round((repeat_size / length) * 100, 2),
            chromosome = as.factor(chromosome),
            dup_coverage_percent = ifelse(is.na(dup_coverage_percent), 0, dup_coverage_percent),
            dup_span_percent = ifelse(is.na(dup_span_percent), 0, dup_span_percent))
```

```{r, echo = FALSE}
cat("The total number of chromosomes in all samples in the dataset is:", nrow(chrom_metrics))
cat("The total number of chromosomes in all samples with called duplications is:", nrow(chrom_metrics %>% filter(n_cnvs > 0)))
cat("The total number of chromosomes in all samples with filtered called duplications is:", nrow(chrom_metrics_filtered %>% filter(n_cnvs > 0)))
```

## Write tables

Create file with `chrom_metrics` without any filtering of original CNVs.  
Create file with `chrom_metrics_filtered` with filters in the original CNVs.  
```{r}
write_tsv(chrom_metrics, chrom_metrics_out_path)
write_tsv(chrom_metrics_filtered, chrom_metrics_filtered_out_path)
```

## Explore Called CNVs {#explore-called-cnvs}

```{r}
cnv_calls %>%
    group_by(cnv) %>%
    summarize(
        count = n(),
        min_norm_depth = min(norm_depth, na.rm = TRUE),
        mean_norm_depth = mean(norm_depth, na.rm = TRUE),
        q25_norm_depth = quantile(norm_depth, probs = 0.25, na.rm = TRUE),
        median_norm_depth = median(norm_depth, na.rm = TRUE),
        q75_norm_depth = quantile(norm_depth, probs = 0.75, na.rm = TRUE),
        max_norm_depth = max(norm_depth, na.rm = TRUE),
        min_smooth_depth = min(smooth_depth, na.rm = TRUE),
        mean_smooth_depth = mean(smooth_depth, na.rm = TRUE),
        q25_smooth_depth = quantile(smooth_depth, probs = 0.25, na.rm = TRUE),
        median_smooth_depth = median(smooth_depth, na.rm = TRUE),
        q75_smooth_depth = quantile(smooth_depth, probs = 0.75, na.rm = TRUE),
        max_smooth_depth = max(smooth_depth, na.rm = TRUE),
        min_region_size = min(region_size, na.rm = TRUE),
        mean_region_size = mean(region_size, na.rm = TRUE),
        q25_region_size = quantile(region_size, probs = 0.25, na.rm = TRUE),
        median_region_size = median(region_size, na.rm = TRUE),
        q75_region_size = quantile(region_size, probs = 0.75, na.rm = TRUE),
        max_region_size = max(region_size, na.rm = TRUE),
    )
```

There are a lot more deletions than duplications.

### Repeats {#repeats}

#### Distribution of Repeat Fraction {#distribution-of-repeat-fraction}

```{r}
#| fig.height: 7
#| fig.width: 9
d <- ggplot(cnv_calls, aes(repeat_fraction, fill = cnv)) +
            facet_wrap(~cnv, ncol = 1, scales = "free")+
            geom_histogram(binwidth = 0.01)+
            scale_x_continuous(labels = scales::comma)+
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Histogram of Repeat Fraction of CNVs",
                subtitle = paste("Binwidth: 0.01"),
                y = "Count",
                x = "Repeat Fraction")
d 
```

In deletions, more of them have high repetitive fraction. In duplications, most of them have low repetitive fraction.

### Depth {#depth}

#### Distribution of Normalized Depth and Smooth Normalized Depth {#distribution-of-normalized-depth-and-smooth-normalized-depth}

The **Normalized depth** (`norm_depth`) is the median of the normalized mean depth of the windows that are part of the CNV region.

The **Smooth normalized depth** (`smooth_depth`) is the median of the smooth normalized mean depth of the windows that are part of the CNV region.

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
d <- ggplot(cnv_calls, aes(norm_depth, fill = cnv)) +
            facet_wrap(~cnv, ncol = 1)+
            geom_histogram(binwidth = 0.1)+
            scale_y_log10(labels = scales::comma) +
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Histogram of Normalized Depth",
            y = "Count (Log 10)",
            x = "Normalized Depth")
s <- ggplot(cnv_calls, aes(smooth_depth, fill = cnv)) +
            facet_wrap(~cnv, ncol = 1)+
            geom_histogram(binwidth = 0.1)+
            scale_y_log10(labels = scales::comma) +
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Histogram of Smooth Normalized Depth",
            y = "Count (Log 10)",
            x = "Smooth Normalized Depth")

d | s
```

There are CNVs with extremely high normalized depth. I will truncate the normalized depth to 5.

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
d <- ggplot(cnv_calls, aes(norm_depth, fill = cnv)) +
            facet_wrap(~cnv, ncol = 1)+
            geom_histogram(binwidth = 0.01)+
            geom_vline(xintercept = del_threshold)+
            geom_vline(xintercept = dup_threshold)+
            scale_y_log10(labels = scales::comma) +
            xlim(0,5)+
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Histogram of Normalized Depth",
            subtitle = paste("Lines in depth threshold:", depth_threshold),
            y = "Count (Log 10)",
            x = "Normalized Depth (truncated)")
s <- ggplot(cnv_calls, aes(smooth_depth, fill = cnv)) +
            facet_wrap(~cnv, ncol = 1)+
            geom_histogram(binwidth = 0.01)+
            geom_vline(xintercept = del_threshold)+
            geom_vline(xintercept = dup_threshold)+
            scale_y_log10(labels = scales::comma) +
            xlim(0,5)+
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Histogram of Smooth Normalized Depth",
            subtitle = paste("Lines in depth threshold:", depth_threshold),
            y = "Count (Log 10)",
            x = "Smooth Normalized Depth (truncated)")

d | s
```

Most deletions have depth (normalized and smooth) close to 0. Most duplications have depth (normalized and smooth) close to the depth threshold with which CNVs were called.

#### Normalized Depth vs. Smooth Normalized Depth

```{r, message = FALSE, warning = FALSE}
#| fig.height: 11
#| fig.width: 9
p <- ggplot(cnv_calls, aes(x = norm_depth, y = smooth_depth)) +
    geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
    geom_hex(bins = 50) +
    facet_wrap(~cut(repeat_fraction, breaks = 4), nrow = 2) +
    scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma) +
    theme_minimal() +
    labs(title = "Hexbin Plot of Normalized Depth vs Smooth Normalized Depth",
        subtitle = "Panels by interval of Repeat Fraction",
         x = "Normalized Depth",
         y = "Smooth Normalized Depth")

o <- ggplot(cnv_calls, aes(x = norm_depth, y = smooth_depth)) +
    geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
    geom_hex(bins = 50) +
    facet_wrap(~cut(repeat_fraction, breaks = 4), nrow = 2) +
    scale_x_continuous(labels = scales::comma, limits = c(0,5)) +
    scale_y_continuous(labels = scales::comma, limits = c(0,5)) +
    scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
    theme_minimal() +
    labs(title = "Hexbin Plot of Normalized Depth vs Smooth Normalized Depth (Truncated axes)",
         subtitle = "Panels by interval of Repeat Fraction",
         x = "Normalized Depth",
         y = "Smooth Normalized Depth")
p / o
```

Since the CNVs are called using the smooth_depth, but it does not always coincide with the norm_depth, there are called CNVs in between the depth threshold used in the CNV calling. Most CNVs are in the diagonal where smooth depth is the same as normalized depth.

There are many duplications with extremely high depth that are in the same high interval of repetitive fraction.

There are more deletion in the high repetitive fraction interval. There are more duplications in the low repetitive fraction interval.

### Size {#size}

#### Distribution of Sizes of CNVs {#distribution-of-sizes-of-cnvs}

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
d <- ggplot(cnv_calls, aes(region_size, fill = cnv)) +
            facet_wrap(~cnv, ncol = 1)+
            geom_histogram(binwidth = 1000)+
            scale_x_continuous(labels = scales::comma)+
            scale_y_log10(labels = scales::comma) +
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Histogram of Sizes of CNVs",
                y = "Count (Log10)",
                x = "Size of CNVs")
d 
```

Only duplication are larger than \~150kb.

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
f <- ggplot(dup_calls_filtered, aes(y = region_size, x = length, color = chromosome)) +
            geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
            geom_point(alpha = 0.3)+
            scale_y_continuous(labels = scales::comma) +
            # facet_wrap(~lineage, ncol = 1)+
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Distribution of Size of\nFiltered dupCNVs by Length of Chromosome",
                y = "Size of CNVs",
                x = "Length of chromosome") 
u <- ggplot(dup_calls, aes(y = region_size, x = length, color = chromosome)) +
            geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
            geom_point(alpha = 0.3)+
            scale_y_continuous(labels = scales::comma) +
            # facet_wrap(~lineage, ncol = 1)+
            theme_minimal() +
            theme(legend.position = "none")+
            labs(title = "Distribution of Size of\nall dupCNVs by Length of Chromosome",
                y = "Size of CNVs",
                x = "Length of chromosome")
u | f
```
The dupCNVs are larger in smaller chromosomes.

#### Depth vs. Size

```{r, message = FALSE, warning = FALSE}
#| fig.height: 11
#| fig.width: 9
p <- ggplot(cnv_calls, aes(x = region_size, y = smooth_depth)) +
    geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
    geom_hex(bins = 50) +
    facet_wrap(~cut(repeat_fraction, breaks = 4), nrow = 2) +
    scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma) +
    theme_minimal() +
    labs(title = "Hexbin Plot of Smooth Normalized Depth vs CNV Size",
         subtitle = "Panels by interval of Repeat Fraction",
         x = "CNV Size",
         y = "Smooth Normalized Depth")

o <- ggplot(cnv_calls, aes(x = region_size, y = smooth_depth)) +
    geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
    geom_hex(bins = 50) +
    facet_wrap(~cut(repeat_fraction, breaks = 4), nrow = 2) +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma, limits = c(0,5)) +
    scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
    theme_minimal() +
    labs(title = "Hexbin Plot of Smooth Normalized Depth vs CNV Size (Truncated Y axis)",
         subtitle = "Panels by interval of Repeat Fraction",
         x = "CNV Size",
         y = "Smooth Normalized Depth")
p / o
```

There are many small CNVs in a high repetitive fraction interval that have extremely high depth.

```{r, message = FALSE, warning = FALSE}
#| fig.height: 11
#| fig.width: 9
p <- ggplot(cnv_calls, aes(x = region_size, y = norm_depth)) +
    geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
    geom_hex(bins = 50) +
    facet_wrap(~cut(repeat_fraction, breaks = 4), nrow = 2) +
    scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma) +
    theme_minimal() +
    labs(title = "Hexbin Plot of Normalized Depth vs CNV Size",
        subtitle = "Panels by interval of Repeat Fraction",
         x = "CNV Size",
         y = "Normalized Depth")

o <- ggplot(cnv_calls, aes(x = region_size, y = norm_depth)) +
    geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
    geom_hex(bins = 50) +
    facet_wrap(~cut(repeat_fraction, breaks = 4), nrow = 2) +
    scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
    scale_x_continuous(labels = scales::comma) +
    scale_y_continuous(labels = scales::comma, limits = c(0,5)) +
    theme_minimal() +
    labs(title = "Hexbin Plot of Normalized Depth vs CNV Size (Truncated Y axis)",
        subtitle = "Panels by interval of Repeat Fraction",
         x = "CNV Size",
         y = "Normalized Depth")
p / o
```

Mostly, the CNVs with very high smooth_depth are small.

The CNVs whose norm_depth is in between the depth thresholds are small. (These are the ones that the norm_depth and smooth_depth don't coincide).

Some dupCNVs are large and have very high depth (the ones that are neither in the vertical cluster of small CNVs and high depth or the horizontal cluster of large CNVs and depth around 2):

```{r}
filter(cnv_calls, region_size > 50000, smooth_depth > 2.5)%>%
  select(sample, lineage, chromosome, norm_depth, smooth_depth, region_size, repeat_fraction)
```

The CNVs with the highest Normalized Depth (smooth or not), are highly repetitive.

There are many delCNVs completely repetitive. The majority of the dupCNVs are not repetitive.

## Explore dupCNVs {#explore-duplications}


### Depth vs. Repeats per Chromosome

Distribution of repeat fraction in dupCNVs after filtering out very high depth groups of CNVs.
```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
n <- ggplot(dup_calls_filter_depth, aes(x = chromosome, y = norm_depth, color = chromosome)) +
       geom_quasirandom()+
       facet_wrap(~cut(repeat_fraction, breaks = 4), ncol = 1) +
        theme_minimal() +
        ylim(0,5)+
        theme(legend.position = "none", axis.text.x = element_text(angle = 90))+
        labs(title = "Distribution of Normalized Depth of dupCNVs",
        subtitle = "Panels by interval of Repeat Fraction",
        y = "Normalized Depth",
        x = "Chromosome")
s <- ggplot(dup_calls_filter_depth, aes(x = chromosome, y = smooth_depth, color = chromosome)) +
       geom_quasirandom()+
       facet_wrap(~cut(repeat_fraction, breaks = 4), ncol = 1) +
        theme_minimal() +
        ylim(0,5)+
        theme(legend.position = "none", axis.text.x = element_text(angle = 90))+
        labs(title = "Distribution of Smooth Normalized Depth of dupCNVs",
        subtitle = "Panels by interval of Repeat Fraction",
        y = "Smooth Normalized Depth",
        x = "Chromosome")
n | s

```

Distribution of repeat fraction in dupCNVs after filtering out very high depth groups of CNVs and CNVs with repeat fraction above `repeat_treshold`.
```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
n <- ggplot(dup_calls_filtered, aes(x = chromosome, y = norm_depth, color = chromosome)) +
       geom_quasirandom()+
        theme_minimal() +
        ylim(0,5)+
        theme(legend.position = "none", axis.text.x = element_text(angle = 90))+
        labs(title = "Distribution of Normalized Depth of dupCNVs",
        y = "Normalized Depth",
        x = "Chromosome")
s <- ggplot(dup_calls_filtered, aes(x = chromosome, y = smooth_depth, color = chromosome)) +
       geom_quasirandom()+
        theme_minimal() +
        ylim(0,5)+
        theme(legend.position = "none", axis.text.x = element_text(angle = 90))+
        labs(title = "Distribution of Smooth Normalized Depth of dupCNVs",
        y = "Smooth Normalized Depth",
        x = "Chromosome")
n | s

```

## Explore depth of chromosomes {#median-depth-of-chromosomes}

The **Normalized median depth of chromosomes** (`norm_chrom_median`) is the normalized median of the depth of the positions in the whole chromosome. (First the median was calculated and then normalized). The **Normalized mean depth of chromosomes** (`norm_chrom_mean`) is the normalized mean of the depth of the positions in the whole chromosome. (First the mean was calculated and then normalized).

```{r, message = FALSE, warning = FALSE}
med <- ggplot(chrom_metrics)+
        geom_histogram(aes(norm_chrom_median), binwidth = 0.01)+
        scale_x_continuous(breaks = seq(0,max(chrom_metrics$norm_chrom_median), by = 0.1)) +
        theme_minimal() +
        labs(title = "Histogram of Normalized median depth of chromosomes",
                y = "Count",
                x = "Normalized median depth of chromosomes")
mea <- ggplot(chrom_metrics)+
        geom_histogram(aes(norm_chrom_mean), binwidth = 0.01)+
        scale_x_continuous(breaks = seq(0,max(chrom_metrics$norm_chrom_median), by = 0.1)) +
        theme_minimal() +
        labs(title = "Histogram of Normalized mean depth of chromosomes",
                y = "Count",
                x = "Normalized mean depth of chromosomes")

med / mea
```

```{r, message = FALSE, warning = FALSE}
med <- ggplot(filter(chrom_metrics, norm_chrom_median > 1.2 ))+
        geom_histogram(aes(norm_chrom_median), binwidth = 0.01)+
        scale_x_continuous(breaks = seq(0,max(chrom_metrics$norm_chrom_median), by = 0.1)) +
        scale_y_continuous(
           breaks = seq(0, max(table(round(chrom_metrics$norm_chrom_median ))) , 1)
         )+
        theme_minimal() +
        theme(panel.grid.minor = element_blank())+
        labs(title = "Histogram of Normalized median depth of chromosomes",
                subtitle = "Only values above 1.2",
                y = "Count",
                x = "Normalized median depth of chromosomes")
mea <- ggplot(filter(chrom_metrics, norm_chrom_mean > 1.2 ))+
        geom_histogram(aes(norm_chrom_mean), binwidth = 0.01)+
        scale_x_continuous(breaks = seq(0,max(chrom_metrics$norm_chrom_mean), by = 0.1)) +
        #scale_y_continuous(breaks = seq(0, max(table(round(chrom_metrics$norm_chrom_mean ))) , 1))+
        theme_minimal() +
        theme(panel.grid.minor = element_blank())+
        labs(title = "Histogram of Normalized mean depth of chromosomes",
                subtitle = "Only values above 1.2",
                y = "Count",
                x = "Normalized mean depth of chromosomes")
med / mea
```

Chromosomes with very high median depth:

```{r}
chrom_metrics %>%
  select(lineage, sample, strain, chromosome, norm_chrom_median, norm_chrom_mean)%>%
  filter(norm_chrom_median > 2.2)%>%
  arrange(norm_chrom_median)
```


### Number of dupCNVs per Chromosome

```{r, message = FALSE, warning = FALSE}
u <- ggplot(filter(chrom_metrics, n_cnvs > 0), aes(x = length, y = n_cnvs, color = chromosome))+
    geom_point(alpha = 0.1)+
    geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
    theme_minimal() +
    theme(legend.position = "none")+
    labs(title = "Number of dupCNVs\nper Chromosome by Length",
            y = "Number of dupCNVs",
            x = "Length of Chromosome (bp)")
f <- ggplot(filter(chrom_metrics_filtered, n_cnvs > 0), aes(x = length, y = n_cnvs, color = chromosome))+
    geom_point(alpha = 0.1)+
    geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
    theme_minimal() +
    labs(title = "Number of filtered dupCNVs\nper Chromosome by Length",
            y = "Number of dupCNVs",
            x = "Length of Chromosome (bp)")
u | f
```
Larger chromosomes have more dupCNVs

### Percentage of chromosome Covered by dupCNVs
```{r, message = FALSE, warning = FALSE}
n_per_chrom <- chrom_metrics %>%
                    filter(n_cnvs > 0)%>%
                    group_by(chromosome, lineage, length)%>%
                    summarize(n = n())
n_per_chrom_filtered <- chrom_metrics_filtered %>%
                    filter(n_cnvs > 0)%>%
                    group_by(chromosome, lineage, length)%>%
                    summarize(n = n())

u <- ggplot(n_per_chrom, aes(x = length, y = n, color = chromosome))+
    geom_col()+
    geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
    theme_minimal() +
    theme(legend.position = "none")+
    labs(title = "Number of Chromosomes with CNVs by Length",
            y = "Number of Chromosomes",
            x = "Length of Chromosome (bp)")
f <- ggplot(n_per_chrom_filtered, aes(x = length, y = n, color = chromosome))+
    geom_col()+
    geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
    theme_minimal() +
    labs(title = "Number of Chromosomes with filtered CNVs by Length",
            y = "Number of Chromosomes",
            x = "Length of Chromosome (bp)")
u | f
```
```{r, message = FALSE, warning = FALSE}
ggplot(filter(chrom_metrics, n_cnvs > 0))+
        geom_quasirandom(aes(x = chromosome, y = dup_coverage_percent, color = chromosome), alpha = 0.1)+
        theme_minimal() +
        labs(title = "Percent of Chromosome Covered by dupCNVs per Chromosome",
                subtitle = "Only chromosomes with at least 1 dupCNV",
                y = "Percent of Chromosome Covered by dupCNVs",
                x = "Chromosome")
```

```{r, message = FALSE, warning = FALSE}
p <- ggplot(filter(chrom_metrics, dup_coverage_percent > 10))+
        geom_quasirandom(aes(x = chromosome, y = dup_coverage_percent))+
        theme_minimal() +
        labs(title = "Percent of Chromosome Covered by dupCNVs per Chromosome",
                subtitle = "Only chromosomes with at least 10% covered",
                x = "Chromosome",
                y = "Percent of Chromosome Covered by dupCNVs")
p
p <- ggplot(filter(chrom_metrics, n_cnvs > 0))+
        geom_quasirandom(aes(x = chromosome, y = dup_span_percent))+
        theme_minimal() +
        labs(title = "Percent of Chromosome Spanned by dupCNVs per Chromosome",
                subtitle = "Only chromosomes with at least 1 dupCNV",
                y = "Percent of Chromosome Spanned by dupCNVs",
                x = "Chromosome")
p
```

```{r, message = FALSE, warning = FALSE}
p <- ggplot(filter(chrom_metrics, dup_coverage_percent > 10))+
        geom_quasirandom(aes(x = chromosome, y = dup_span_percent))+
        theme_minimal() +
        labs(title = "Percent of Chromosome Spanned by dupCNVs per Chromosome",
                subtitle = "Only chromosomes with at least 10% spanned",
                y = "Percent of Chromosome Spanned by dupCNVs",
                x = "Chromosome")
ggMarginal(p, type = "histogram")
```

```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(y = norm_chrom_median, x = chromosome))+
        geom_boxplot()+
        geom_hline(yintercept =1, color = "black", linetype = "solid")+
        geom_hline(yintercept =2, color = "black", linetype = "solid")+
        theme_minimal() +
        labs(title = "Histogram of Normalized median depth of chromosomes",
                y = "Count",
                x = "Normalized median depth of chromosomes")


```
```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(y = norm_chrom_median, x = chromosome, color = lineage))+
        geom_boxplot()+
        geom_hline(yintercept =1, color = "black", linetype = "solid")+
        geom_hline(yintercept =2, color = "black", linetype = "solid")+
        theme_minimal() +
        labs(title = "Histogram of Normalized median depth of chromosomes",
                y = "Count",
                x = "Normalized median depth of chromosomes")
```
```{r, message = FALSE, warning = FALSE}
#| fig.height: 9
#| fig.width: 9
ggplot(chrom_metrics, aes(y = norm_chrom_median, x = length, color = chromosome))+
    geom_point(alpha = 0.05)+
    facet_wrap(~lineage, ncol = 1)+
    geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
    # geom_hline(yintercept =1, color = "black", linetype = "solid")+
    # geom_hline(yintercept =2, color = "black", linetype = "solid")+
    theme_minimal() +
    labs(title = "Histogram of Normalized median depth of chromosomes",
        y = "Normalized median depth of chromosomes",
        x = "Chromosome length")
```

```{r, message = FALSE, warning = FALSE}
#| fig.height: 9
#| fig.width: 9
ggplot(chrom_metrics, aes(y = norm_chrom_median, x = length, color = chromosome))+
    geom_point(alpha = 0.05)+
    geom_smooth(method = "lm", se = TRUE, color = "blue", linetype = "dashed") +
    geom_hline(yintercept =1, color = "black", linetype = "solid")+
    geom_hline(yintercept =2, color = "black", linetype = "solid")+
    theme_minimal() +
    labs(title = "Histogram of Normalized median depth of chromosomes",
        y = "Normalized median depth of chromosomes",
        x = "Chromosome length")
```

```{r, message = FALSE, warning = FALSE}
ggplot(filter(chrom_metrics, lineage == "VNI"), aes(y = norm_chrom_mean, x = length, color = chromosome))+
        geom_boxplot()+
        # geom_hline(yintercept =1, color = "black", linetype = "solid")+
        # geom_hline(yintercept =2, color = "black", linetype = "solid")+
        theme_classic() +
        labs(title = "Histogram of Normalized median depth of chromosomes",
                y = "Count",
                x = "Normalized median depth of chromosomes")
```
```{r, message = FALSE, warning = FALSE}
ggplot(filter(chrom_metrics, lineage == "VNI"), aes(y = norm_chrom_mean, x = length))+
        geom_hex(bins = 50)+
        geom_hline(yintercept =1, color = "black", linetype = "solid")+
        geom_hline(yintercept =2, color = "black", linetype = "solid")+
        scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +

        theme_classic() +
        labs(title = "Histogram of Normalized median depth of chromosomes",
                y = "Count",
                x = "Normalized median depth of chromosomes")
```
### Explore relationship between CNV chromosomal metrics {#explore-relationship-between-cnv-chromosomal-metrics}

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 7
ggplot(filter(chrom_metrics, n_cnvs > 0), aes(x = dup_coverage_percent, y = dup_span_percent)) +
        geom_hex(bins=50) +
        scale_x_continuous(labels = scales::comma) +
        geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
        scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
        theme_minimal() +
        theme(legend.position = "right")+
        labs(title = "Percent of Chromosome Spanned by dupCNVs vs Covered by dupCNVs",
            y = "Percent of Chromosome Spanned by dupCNVs",
            x = "Percent of Chromosome Covered by dupCNVs")
```

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 7
ggplot(filter(chrom_metrics, n_cnvs > 0), aes(x = dup_coverage_percent, y = n_cnvs)) +
        geom_hex(bins=50) +
        scale_x_continuous(labels = scales::comma) +
        scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
        theme_minimal() +
        theme(legend.position = "right")+
        labs(title = "Number of CNVs vs Percent of Chromosome Covered by dupCNVs ",
            y = "Number of CNVs",
            x = "Percent of Chromosome Covered by dupCNVs")
```

```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = dup_span_percent)) +
        geom_point(aes(color = n_cnvs)) +
        scale_x_continuous(labels = scales::comma) +
        scale_color_distiller(palette = "GnBu", direction = -1, trans = "log2", name = "Number\n of CNVs") +
        theme_minimal() +
        theme(legend.position = "right")+
        labs(title = "Percent of Chromosome Covered by CNVs vs Spanned by CNVs",
            y = "Percent of Chromosome Spanned by CNVs",
            x = "Percent of Chromosome Covered by CNVs")
```
```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = dup_span_percent)) +
        geom_point(aes(color = norm_chrom_median)) +
        scale_x_continuous(labels = scales::comma) +
        scale_color_viridis_c(name = "Normalized Median\nDepth of Chromosome", direction = -1) +
        theme_minimal() +
        theme(legend.position = "right")+
        labs(title = "Percent of Chromosome Covered by CNVs vs Spanned by CNVs",
            y = "Percent of Chromosome Spanned by CNVs",
            x = "Percent of Chromosome Covered by CNVs")
```
```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = dup_span_percent)) +
        geom_point(aes(color = norm_chrom_mean)) +
        facet_wrap(~cut(norm_chrom_median, breaks = 6), nrow = 2) +
        scale_x_continuous(labels = scales::comma) +
        scale_color_viridis_c(name = "Normalized Mean\nDepth of Chromosome", direction = -1) +
        theme_minimal() +
        theme(legend.position = "right")+
        labs(title = "Percent of Chromosome Covered by CNVs vs Spanned by CNVs",
            y = "Percent of Chromosome Spanned by CNVs",
            x = "Percent of Chromosome Covered by CNVs")
```

## Compare metrics of dupCNVs with chromosome depth {#compare-metrics-of-dcnvs-with-chromosome-depth}

The **Normalized depth** (`norm_depth`) is the median of the normalized depth of the windows that are part of each dupCNV region.

The **Median depth of dupCNV** (`median_cnv_depth`) is the median of the Normalized depth of all dupCNVs in the chromosome. There are values bellow the threshold of depth to call a Duplication CNV because that threshold was applied to the smoothed values and this are the raw values.

The **Normalized median depth of chromosomes** (`norm_chrom_median`) is the normalized median of the depth of the positions in the whole chromosome. (First the median was calculated and then normalized).

The **Percent of Chromosome Covered by dupCNVs** (`dup_coverage_percent`) is the percentage of the full length of the chromosome that is part of called dupCNVs.

The **Percent of Chromosome Spanned by dupCNVs** (`dup_span_percent`) is the percentage of the full length of the chromosome that is in between the leftmost and rightmost dupCNVs.


```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = norm_chrom_median)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "dashed") +
        geom_hex(bins = 50)+
        scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
        theme_minimal() +
        theme(legend.position = "right") +
        labs(title = "Percent of Chromosome Covered by dupCNVs vs. Depth of Chromosome",
             y = "Normalized Median Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs")

```

```{r, message = FALSE, warning = FALSE}
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = norm_chrom_mean)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "dashed") +
        geom_hex(bins = 50)+
        scale_fill_viridis_c(name = "Count\nLog10", direction = -1, trans = "log10") +
        theme_minimal() +
        theme(legend.position = "right") +
        labs(title = "Percent of Chromosome Covered by dupCNVs vs. Depth of Chromosome",
             y = "Normalized Mean Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs")

```

```{r, message = FALSE, warning = FALSE}
color_range <- paste("2.6 -", max(chrom_metrics$median_cnv_depth, na.rm = TRUE))
colors <- c("#FDE725", "#1F9E89", "#440154")
names(colors) <-c("0 - 1.6", "1.6 - 2.6", color_range)
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = norm_chrom_median)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "dashed") +
        geom_point(aes(color = cut(median_cnv_depth, 
                            breaks = c(-Inf, 1.6, 2.6, Inf), 
                            labels = c("0 - 1.6", "1.6 - 2.6", color_range))),
                            alpha = 0.5) +
        scale_color_manual(values = colors, 
                            name = "Median dupCNV Depth") +
        theme_minimal() +
        theme(legend.position = "right") +
        labs(title = "Percent of Chromosome Covered by dupCNVs vs. Depth of Chromosome",
             y = "Normalized Median Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs")
```

```{r, message = FALSE, warning = FALSE}
color_range <- paste("2.6 -", max(chrom_metrics$mean_cnv_depth, na.rm = TRUE))
colors <- c("#FDE725", "#1F9E89", "#440154")
names(colors) <-c("0 - 1.6", "1.6 - 2.6", color_range)
ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = norm_chrom_mean)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "dashed") +
        geom_point(aes(color = cut(mean_cnv_depth, 
                            breaks = c(-Inf, 1.6, 2.6, Inf), 
                            labels = c("0 - 1.6", "1.6 - 2.6", color_range))),
                            alpha = 0.5) +
        scale_color_manual(values = colors, 
                            name = "Mean dupCNV Depth") +
        theme_minimal() +
        theme(legend.position = "right") +
        labs(title = "Percent of Chromosome Covered by dupCNVs vs. Depth of Chromosome",
             y = "Normalized Mean Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs")
```
