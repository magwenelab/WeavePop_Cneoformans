---
title: "Identification of Aneuploid Chromosomes"
author: "Claudia Zirión-Martínez"
date: "2025-05-19"

fig-height: 7
fig-width: 9

format: 
  html:
    page-layout: full
---


## Setup {#setup}

```{r, eval=FALSE, echo=FALSE}
setwd("/FastData/czirion/WeavePop_Cneoformans/analyses")
```

Libraries

```{r libraries, output=FALSE}
library(tidyverse)
library(patchwork)
library(ggnewscale)
library(RColorBrewer)
library(svglite)
```

Paths

Use the metadata table generated by `analyses/scripts/metadata.ipynb`  
and the `cnv_chromosomes.tsv` of the joined dataset generated by WeavePop.
```{r paths}
# Input
metadata_path <-
    "data/processed/metadata_ashton_desj_all_weavepop_final_H99.csv"
cnv_chroms_path <-
    "../Crypto_Desjardins_Ashton/results_filtered/02.Dataset/cnv/cnv_chromosomes.tsv"

# Output
chrom_metrics_path <- "results/tables/chromosome_cnv_categories.tsv"

duplications_path <- "results/tables/duplications.tsv"
duplications_partial_path <- "results/tables/duplications_partial.tsv"

barplot_aneup_category_dups_path1 <- "results/figs/barplot_aneup_category_dups1.png"
barplot_aneup_category_dups_path2 <- "results/figs/barplot_aneup_category_dups2.png"
barplot_size_category_dups_path <- "results/figs/barplot_size_category_dups.png"

```

## Prepare dataset {#prepare-dataset}

### Metadata {#metadata}

Use the metadata table that has all the samples included in the final **Crypto_Desjardins_Ashton** dataset (n = 1026) and H99.  
Select needed columns, remove H99 and get the number of samples per dataset and lineage, per lineage, per lineage and source and total.

```{r, message=FALSE, warning=FALSE}
metadata <- read.delim(
    metadata_path,
    header=TRUE,
    sep=",",
    stringsAsFactor = TRUE)
metadata <- metadata %>%
    select(sample, strain, source, lineage, dataset, vni_subdivision)%>%
    filter(!strain == "H99") %>%
    group_by(dataset, lineage)%>%
    mutate(samples_in_dataset_lineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(lineage)%>%
    mutate(samples_in_lineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(vni_subdivision)%>%
    mutate(samples_in_sublineage = n_distinct(sample))%>%
    ungroup() %>%
    group_by(lineage,source,samples_in_lineage) %>%
    mutate(samples_in_lineage_source = n_distinct(sample))%>%
    ungroup()%>%
    mutate(total_samples = n_distinct(sample))%>%
    droplevels()

metadata_lin_source <- metadata %>%
    select(lineage, source, samples_in_lineage, samples_in_lineage_source, total_samples)%>%
    distinct()
```

```{r, message=FALSE, warning=FALSE}
n_lineage <- metadata %>%
    select(lineage, samples_in_lineage)%>%
    distinct()
```

## CNV metrics per chromosome

Read the table with the information of each type of CNV in each chromosome of all samples.  
Remove single-copy rows.  
Change the chromosome names to the format "chr01".
```{r, message=FALSE, warning=FALSE}
cnv_chroms <- read.delim(
    cnv_chroms_path,
    header = TRUE,
    sep = "\t")%>%
    filter(cnv != "single_copy") %>%
    mutate(chromosome = str_pad(chromosome, 2, pad = "0"))

cnv_chroms$chromosome <- as.factor(cnv_chroms$chromosome)
levels(cnv_chroms$chromosome) <- paste("chr", levels(cnv_chroms$chromosome), sep="")

cnv_chroms$lineage <- factor(cnv_chroms$lineage, levels = c("VNI", "VNBI", "VNBII", "VNII"))
```

## Categorize by percent of coverage

### Three categories by "aneuploidy"

Use thresholds to make categories according to the percentage of the size of 
the chormosome covered by CNVs.  

* full:     [full_threshold,    100]  
* partial:  (euploid_threshold,   full_threshold)  
* euploid:  [0,    euploid_threshold]  

```{r, message=FALSE, warning=FALSE}
#| code-fold: false
euploid_threshold <- 20
full_threshold <- 80
```

```{r,message=FALSE}
chrom_metrics <- cnv_chroms %>%
    mutate(chrom_category_aneuploidy = case_when(
        coverage_percent >= full_threshold ~ "Full",
        coverage_percent > euploid_threshold & coverage_percent < full_threshold ~ "Partial",
        coverage_percent <= euploid_threshold ~ "Euploid",
))
chrom_metrics$chrom_category_aneuploidy <- factor(chrom_metrics$chrom_category_aneuploidy, 
                                levels = c("Full", "Partial", "Euploid"))
```

### Four categories by "size"

Use thresholds to make categories according to the percentage of the size of 
the chormosome covered by CNVs.  

* large:     [large_threshold,    100]  
* medium:  (small_threshold,   large_threshold)  
* small:    (absent_threshold,    small_threshold]  
* absent:   [0,                 absent_threshold]

```{r, message=FALSE, warning=FALSE}
#| code-fold: false
absent_threshold <- 5
small_threshold <- 20
large_threshold <- 80
```

```{r,message=FALSE}
chrom_metrics <- chrom_metrics %>%
    mutate(chrom_category_size = case_when(
        coverage_percent >= large_threshold ~ "Large",
        coverage_percent > small_threshold & coverage_percent < large_threshold ~ "Medium",
        coverage_percent > absent_threshold & coverage_percent <= small_threshold ~ "Small",
        coverage_percent <= absent_threshold ~ "Absent",
))
chrom_metrics$chrom_category_size <- factor(chrom_metrics$chrom_category_size, 
                                levels = c("Large", "Medium", "Small", "Absent"))
```

## Sample metrics

```{r,message=FALSE}
sample_metrics <- chrom_metrics %>%
    group_by(sample, lineage, cnv)%>%
    summarize(category_size = ifelse(any(chrom_category_size == "Large"), "Large", 
                                        ifelse(any(chrom_category_size == "Medium"), "Medium", 
                                            ifelse(any(chrom_category_size == "Small"), "Small", "Absent"))),
             category_aneuploidy = ifelse(any(chrom_category_aneuploidy == "Full"), "Full", 
                                            ifelse(any(chrom_category_aneuploidy == "Partial"), "Partial", "Euploid")))%>%
    left_join(metadata, by = c("sample", "lineage"))%>%
    mutate(source_size = paste(source, category_size),
            source_aneuploidy = paste(source, category_aneuploidy))

sample_metrics$category_size <- factor(sample_metrics$category_size, 
                                levels = levels(chrom_metrics$chrom_category_size))

sample_metrics$category_aneuploidy <- factor(sample_metrics$category_aneuploidy, 
                                levels = levels(chrom_metrics$chrom_category_aneuploidy))

sample_metrics$source_size <- factor(sample_metrics$source_size, levels = c(
    "Environmental Absent", "Environmental Small" , "Environmental Medium", "Environmental Large",
    "Clinical Absent", "Clinical Small", "Clinical Medium",  "Clinical Large"))

sample_metrics$source_aneuploidy <- factor(sample_metrics$source_aneuploidy, levels = c(
      "Environmental Euploid","Environmental Partial","Environmental Full",
       "Clinical Euploid",  "Clinical Partial", "Clinical Full"
    ))
```

```{r,message=FALSE}
source_aneuploidy_colors <- brewer.pal(11, "BrBG")[c(11,8,7,1,2,5)]
names(source_aneuploidy_colors) <- rev(levels(sample_metrics$source_aneuploidy))
source_size_colors <- brewer.pal(11, "BrBG")[c(11,10,8,7,1,2,4,5)]
names(source_size_colors) <- rev(levels(sample_metrics$source_size))
```

## Join chromosome metrics with metadata and save table

```{r, message=FALSE, warning=FALSE}
chrom_metrics <- left_join(chrom_metrics, metadata)
```
```{r, message=FALSE, warning=FALSE}
write.table(chrom_metrics, file = chrom_metrics_path, sep = "\t",  quote = FALSE, row.names = FALSE)
```

## Summaries of samples in each category

### Create function to make summaries
```{r, message=FALSE, warning=FALSE}
get_summary <- function(df, variable1, variable2=NULL, variable3=NULL, cnv_type, total_n){
    if(is.null(variable2) & is.null(variable3)){
        if(!is.null(cnv_type)){
            df %>%
                filter(cnv == cnv_type) %>%
                group_by(.data[[variable1]], 
                .data[[total_n]],)%>%
                summarize(n = n_distinct(sample))%>%
                mutate(percent = (n / .data[[total_n]])*100)%>%
                arrange(.data[[variable1]])
        } else{
            df %>%
                group_by(.data[[variable1]], 
                        .data[[variable2]],
                        .data[[total_n]],)%>%
                summarize(n = n_distinct(sample))%>%
                mutate(percent = (n / .data[[total_n]])*100)%>%
                arrange(.data[[variable1]])
        }
    }else if(!is.null(variable2) & is.null(variable3)){
            if(!is.null(cnv_type)){
                df %>%
                    filter(cnv == cnv_type) %>%
                    group_by(.data[[variable1]], 
                            .data[[variable2]],
                            .data[[total_n]],)%>%
                    summarize(n = n_distinct(sample))%>%
                    mutate(percent = (n / .data[[total_n]])*100)%>%
                    arrange(.data[[variable1]], 
                            .data[[variable2]])
            } else{
                df %>%
                    group_by(.data[[variable1]], 
                            .data[[variable2]],
                            .data[[total_n]],)%>%
                    summarize(n = n_distinct(sample))%>%
                    mutate(percent = (n / .data[[total_n]])*100)%>%
                    arrange(.data[[variable1]], 
                            .data[[variable2]])
            }
    }else{
            if(!is.null(cnv_type)){
                df %>%
                    filter(cnv == cnv_type) %>%
                    group_by(.data[[variable1]], 
                            .data[[variable2]],
                            .data[[variable3]],
                            .data[[total_n]],)%>%
                    summarize(n = n_distinct(sample))%>%
                    mutate(percent = (n / .data[[total_n]])*100)%>%
                    arrange(.data[[variable1]], 
                            .data[[variable2]],
                            .data[[variable3]])
            } else{
                df %>%
                    group_by(.data[[variable1]], 
                            .data[[variable2]],
                            .data[[variable3]],
                            .data[[total_n]],)%>%
                    summarize(n = n_distinct(sample))%>%
                    mutate(percent = (n / .data[[total_n]])*100)%>%
                    arrange(.data[[variable1]], 
                            .data[[variable2]],
                            .data[[variable3]])
            }
    }
}
```

## Summaries of duplications by "aneuploidy" category
<details><summary> **Number of samples with duplications per lineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = sample_metrics,
            variable1= "category_aneuploidy",
            variable2= "lineage", 
            cnv_type= "duplication", 
            total_n = "samples_in_lineage")
```
</details>

<details><summary> **Number of samples with duplications in each group of lineage-source**</summary>


```{r, message=FALSE, warning=FALSE}
dup_lin_source <- get_summary(df = sample_metrics,
            variable1= "source_aneuploidy", 
            variable2= "lineage",
            cnv_type= "duplication", 
            total_n = "samples_in_lineage")
dup_lin_source
```
</details>

```{r,message=FALSE}
#| fig-height: 4
#| fig-width: 6.5
p <- ggplot(dup_lin_source) +
        geom_col(aes(x = lineage, y = percent, fill = source_aneuploidy),
                    color = NA, position = "stack", show.legend = TRUE)+
        scale_fill_manual(
            values = source_aneuploidy_colors,
            limits = names(source_aneuploidy_colors),
            drop = FALSE
        )+
        guides(fill = guide_legend(ncol = 2))+
        geom_text(data = n_lineage, 
                    aes(x = lineage, y = 108, label = paste("n = ", samples_in_lineage)),
                    size = 4)+
        scale_y_continuous(limits = c(0,110),
                            breaks = seq(0,100, by = 10))+
        coord_flip()+
        theme_minimal()+
        labs(x = "Lineage",
                y = "Percent",
                fill = "Type",
                color = "Source",
                title = "a)")+
        theme(legend.position = "bottom",
                legend.direction = "vertical",
                legend.title = element_blank(),
                legend.text=element_text(size=7),
                legend.key.size = unit(0.5, unit = "cm"),
                legend.margin=margin(t= 0.1, b = 0.1, unit = "cm"),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                axis.text = element_text(size = 10, color = "black"),
                axis.title.y = element_blank(),
                axis.title.x = element_text(size = 12, color = "black"),
                plot.background = element_rect(fill = "white", color = "white"),
                plot.title = element_text(hjust = -0.07, vjust=1))

p
```
```{r,message=FALSE}
ggsave(barplot_aneup_category_dups_path1, p, height = 3, width = 6.5, units = "in", dpi = 900)
```
```{r,message=FALSE}
#| fig-height: 4
#| fig-width: 6.5
p <- ggplot(dup_lin_source) +
        geom_col(aes(x = lineage, y = percent, fill = source_aneuploidy),
                    color = NA, position = "stack", show.legend = TRUE)+
        scale_fill_manual(
            values = source_aneuploidy_colors,
            limits = names(source_aneuploidy_colors),
            drop = FALSE
        )+
        guides(fill = guide_legend(ncol = 1))+
        geom_text(data = n_lineage, 
                    aes(x = lineage, y = 108, label = paste("n = ", samples_in_lineage)),
                    size = 3.5)+
        scale_y_continuous(limits = c(0,110),
                            breaks = seq(0,100, by = 10))+
        coord_flip()+
        theme_minimal()+
        labs(x = "Lineage",
                y = "Percent",
                fill = "Type",
                color = "Source",
                title = "a)")+
        theme(legend.position = "right",
                legend.direction = "vertical",
                legend.title = element_blank(),
                legend.text=element_text(size=7),
                legend.key.size = unit(0.4, unit = "cm"),
                legend.margin=margin(t= 0.1, b = 0.1, unit = "cm"),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                axis.text = element_text(size = 10, color = "black"),
                axis.title.y = element_blank(),
                axis.title.x = element_text(size = 12, color = "black"),
                plot.background = element_rect(fill = "white", color = "white"),
                plot.title = element_text(hjust = -0.09, vjust=1))

p
```
```{r,message=FALSE}
ggsave(barplot_aneup_category_dups_path2, p, height = 2, width = 6.5, units = "in", dpi = 900)
```

<details><summary> **Number of samples with duplications per group of dataset-lineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = sample_metrics, 
            variable1= "category_aneuploidy", 
            variable2= "dataset",
            variable3= "lineage",
            cnv_type= "duplication", 
            total_n = "samples_in_dataset_lineage")
```

</details>

<details><summary> **Number of samples with duplications per VNI sublineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df =  filter(sample_metrics, lineage == "VNI"),
            variable1= "category_aneuploidy", 
            variable2= "vni_subdivision", 
            cnv_type= "duplication", 
            total_n = "samples_in_sublineage")
```

</details>

<details><summary> **Number of samples with duplications in each chromosome**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = filter(chrom_metrics, chrom_category_aneuploidy %in% c("Full", "Partial")),
            variable1= "chrom_category_aneuploidy",
            variable2= "chromosome", 
            cnv_type= "duplication", 
            total_n = "total_samples")
```

</details>

<details><summary> **Number of samples with duplications in each group of chromosome-lineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = filter(chrom_metrics, chrom_category_aneuploidy %in% c("Full", "Partial")),
            variable1= "chrom_category_aneuploidy",
            variable2= "chromosome",  
            variable3= "lineage",
            cnv_type= "duplication", 
            total_n = "samples_in_lineage")
```

</details>

<details><summary> **Number and identity of fully duplicated chromosomes per samples**</summary>

```{r, message=FALSE, warning=FALSE}
chrom_metrics %>%
    filter(cnv == "duplication", chrom_category_aneuploidy == "Full")%>%
    group_by(sample, strain, source, lineage, dataset) %>%
    summarise(n_chroms = n_distinct(chromosome), 
            chromosomes = paste(chromosome, collapse = ", ")) %>%
    arrange(desc(n_chroms), chromosomes)%>%
    select(sample, strain, lineage, dataset, source, n_chroms, chromosomes)
```

</details>

<details><summary> **Number and identity of partially duplicated chromosomes per samples**</summary>

```{r, message=FALSE, warning=FALSE}
chrom_metrics %>%
    filter(cnv == "duplication", chrom_category_aneuploidy == "Partial")%>%
    group_by(sample, strain, source, lineage, dataset) %>%
    summarise(n_chroms = n_distinct(chromosome), 
            chromosomes = paste(chromosome, collapse = ", ")) %>%
    arrange(desc(n_chroms), chromosomes)%>%
    select(sample, strain, lineage, dataset, source, n_chroms, chromosomes)
```

</details>

## Summaries of duplications by "size" category
<details><summary> **Number of samples with duplications per lineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = sample_metrics,
            variable1= "category_size", 
            variable2= "lineage",
            cnv_type= "duplication", 
            total_n = "samples_in_lineage")
```
</details>

<details><summary> **Number of samples with duplications in each group of lineage-source**</summary>


```{r, message=FALSE, warning=FALSE}
dup_lin_source <- get_summary(df = sample_metrics,
            variable1= "source_size", 
            variable2= "lineage",
            cnv_type= "duplication", 
            total_n = "samples_in_lineage")
dup_lin_source
```
</details>

```{r,message=FALSE}
#| fig-height: 4
#| fig-width: 6.5
p <- ggplot(dup_lin_source) +
        geom_col(aes(x = lineage, y = percent, fill = source_size),
                    color = NA, position = "stack", show.legend = TRUE)+
        scale_fill_manual(
            values = source_size_colors,
            limits = names(source_size_colors),
            drop = FALSE
        )+
        guides(fill = guide_legend(ncol = 2))+
        geom_text(data = n_lineage, 
                    aes(x = lineage, y = 108, label = paste("n = ", samples_in_lineage)),
                    size = 4)+
        scale_y_continuous(limits = c(0,110),
                            breaks = seq(0,100, by = 10))+
        coord_flip()+
        theme_minimal()+
        labs(x = "Lineage",
                y = "Percent",
                fill = "Type",
                color = "Source")+
        theme(legend.position = "bottom",
                legend.direction = "vertical",
                legend.title = element_blank(),
                legend.text=element_text(size=10),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank(),
                axis.text = element_text(size = 10, color = "black"),
                axis.title = element_text(size = 12, color = "black"),
                plot.background = element_rect(fill = "white", color = "white")
)
p
```

```{r,message=FALSE}
ggsave(barplot_size_category_dups_path, p, height = 4, width = 6.5, units = "in", dpi = 900)
```
<details><summary> **Number of samples with duplications per group of dataset-lineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = sample_metrics, 
            variable1= "category_size", 
            variable2= "lineage",
            variable3= "dataset",
            cnv_type= "duplication", 
            total_n = "samples_in_dataset_lineage")
```

</details>

<details><summary> **Number of samples with duplications per VNI sublineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df =  filter(sample_metrics, lineage == "VNI"),
            variable1= "category_size",
            variable2= "vni_subdivision", 
            cnv_type= "duplication", 
            total_n = "samples_in_sublineage")
```

</details>

<details><summary> **Number of samples with duplications in each chromosome**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = filter(chrom_metrics, chrom_category_size %in% c("Full", "Partial")),
            variable1= "chrom_category_size", 
            variable2= "chromosome",
            cnv_type= "duplication", 
            total_n = "total_samples")
```

</details>

<details><summary> **Number of samples with duplications in each group of chromosome-lineage**</summary>

```{r, message=FALSE, warning=FALSE}
get_summary(df = filter(chrom_metrics, chrom_category_size %in% c("Full", "Partial")),
            variable1= "chrom_category_size",
            variable2= "chromosome", 
            variable3= "lineage",
            cnv_type= "duplication", 
            total_n = "samples_in_lineage")
```

</details>

<details><summary> **Number and identity of chromosomes with large duplications per samples**</summary>

```{r, message=FALSE, warning=FALSE}
chrom_metrics %>%
    filter(cnv == "duplication", chrom_category_size == "Large")%>%
    group_by(sample, strain, source, lineage, dataset) %>%
    summarise(n_chroms = n_distinct(chromosome), 
            chromosomes = paste(chromosome, collapse = ", ")) %>%
    arrange(desc(n_chroms), chromosomes)%>%
    select(sample, strain, lineage, dataset, source, n_chroms, chromosomes)
```

</details>

<details><summary> **Number and identity of chromosomes with medium duplications per samples**</summary>

```{r, message=FALSE, warning=FALSE}
chrom_metrics %>%
    filter(cnv == "duplication", chrom_category_size == "Medium")%>%
    group_by(sample, strain, source, lineage, dataset) %>%
    summarise(n_chroms = n_distinct(chromosome), 
            chromosomes = paste(chromosome, collapse = ", ")) %>%
    arrange(desc(n_chroms), chromosomes)%>%
    select(sample, strain, lineage, dataset, source, n_chroms, chromosomes)
```

</details>