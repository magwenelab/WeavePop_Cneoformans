---
title: "Ploidy vs Depth-CNV Metrics"
author: "Claudia Zirión-Martínez"
date: "2025-04-15"

fig-height: 7
fig-width: 9

format: 
  html:
    page-layout: full
---

## Setup
```{r, eval=FALSE, echo=FALSE}
setwd("/FastData/czirion/WeavePop_Cneoformans/analyses")
```

Libraries
```{r libraries, output=FALSE}
library(tidyverse)
library(ggrepel)
library(patchwork)
library(ggExtra)
library(ggbeeswarm)
```

Paths 
```{r paths}
chrom_metrics_path <- "results/tables/chrom_metrics_filtered.tsv" # or "results/tables/chrom_metrics_filtered.tsv"
ploidy_path <- "results/tables/ploidy_from_plots.tsv"
```


## Read data
```{r}
ploidy <- read.delim(
                ploidy_path,
                header = TRUE,
                sep = "\t",
                stringsAsFactors = FALSE)%>%
          select(sample, strain, lineage,
                 accession, chromosome, ploidy, type, gappy, 
                 distribution_pattern, fraction_duplications,
                 steps, smile, uniform)%>%
            distinct()
    
ploidy$ploidy <- factor(ploidy$ploidy, levels = c("haploid", "diploid", "triploid", "tetraploid"))
ploidy$type <- factor(ploidy$type, levels = c("full", "large", "partial"))

chrom_metrics <- read.delim(
    chrom_metrics_path,
    header = TRUE,
    sep = "\t",
    stringsAsFactors = FALSE
)

chrom_metrics <- left_join(chrom_metrics, ploidy, by = c("sample", "strain", "lineage", "accession", "chromosome"))
```

## Depth vs Coverage of dupCNVs of all Chromosomes

These were the filters used to obtain all the sample-chromosomes that might have enough depth variation to be able to identify ploidy from the depth data.   
```{r}
#| code-fold: false
size_threshold <- 20
depth_threshold <- 1.4
```

The sample-chromosomes are divided into four categories according to both filters.

```{r}
chrom_metrics <- chrom_metrics %>%
    mutate(filters = case_when(
        dup_coverage_percent > size_threshold & norm_chrom_median > depth_threshold ~ "high_depth_covered",
        dup_coverage_percent > size_threshold & norm_chrom_median <= depth_threshold ~ "low_depth_covered",
        dup_coverage_percent <= size_threshold & norm_chrom_median > depth_threshold ~ "high_depth_not_covered",
        dup_coverage_percent <= size_threshold & norm_chrom_median <= depth_threshold ~ "low_depth_not_covered"))
```

```{r, message = FALSE, warning = FALSE}
ggplot()+theme_minimal()
med <- ggplot(chrom_metrics, aes(x = dup_coverage_percent, y = norm_chrom_median, color = filters)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "solid") +
        geom_hline(yintercept = depth_threshold, color = "red", linetype = "dashed") +
        geom_vline(xintercept = size_threshold, color = "red", linetype = "dashed") +
        geom_point() +
        scale_color_brewer(name = "Filters category", palette = "Dark2") +
        scale_x_continuous(limits = c(0,100))+
        theme_minimal() +
        theme(legend.position = "bottom") +
        labs(title = "Percent of Chromosome Covered by dupCNVs vs. Depth of Chromosome",
             y = "Normalized Median Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs")  

p <- ggMarginal(
    med,
    type = "boxplot",
    margins = "both",
    size = 5,
    groupColour = TRUE,
    groupFill = TRUE
)      
p
```

## Relationship between depth-CNV data and visual categorization of ploidy and length of CNV

```{r}
ploidy_summary <- ploidy %>%
    group_by(ploidy) %>%
    summarise(n_samples = n_distinct(sample)) %>%
    arrange(desc(n_samples))
ploidy_summary
```

```{r, message = FALSE, warning = FALSE}
ggplot()+theme_minimal()

med <- ggplot(filter(chrom_metrics, filters != "low_depth_not_covered"),
             aes(x = dup_coverage_percent, y = norm_chrom_median, color = type, shape = ploidy)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "solid") +
        geom_hline(yintercept = depth_threshold, color = "red", linetype = "dashed") +
        geom_vline(xintercept = size_threshold, color = "red", linetype = "dashed") +
        geom_point() +
        scale_color_brewer(name = "Type", palette = "Set1") +
        scale_x_continuous(limits = c(0,100))+
        theme_minimal() +
        theme(legend.position = "bottom") +
        labs(y = "Normalized Median Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs",
             shape = "Ploidy")  

p1 <- ggMarginal(
    med,
    type = "boxplot",
    margins = "both",
    size = 5,
    groupColour = TRUE,
    groupFill = TRUE
)      
p1
```

## Filter to find possible full duplications
```{r}
#| code-fold: false
size_threshold <- 20
depth_threshold <- 1.4
```
```{r}
chrom_metrics <- chrom_metrics %>%
    mutate(filters = case_when(
        dup_coverage_percent > size_threshold & norm_chrom_median > depth_threshold ~ "high_depth_covered",
        dup_coverage_percent > size_threshold & norm_chrom_median <= depth_threshold ~ "low_depth_covered",
        dup_coverage_percent <= size_threshold & norm_chrom_median > depth_threshold ~ "high_depth_not_covered",
        dup_coverage_percent <= size_threshold & norm_chrom_median <= depth_threshold ~ "low_depth_not_covered"))
```
```{r create diff span cov}
dup_chroms <- chrom_metrics %>%
    filter(filters != "low_depth_not_covered")%>%
    mutate(diff_span_cov = abs(dup_span_percent - dup_coverage_percent))
```
```{r, message = FALSE, warning = FALSE}
ggplot()+theme_minimal()

med <- ggplot(dup_chroms, 
            aes(x = dup_coverage_percent, y = norm_chrom_median, color = type, shape = ploidy)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "solid") +
        geom_hline(yintercept = depth_threshold, color = "red", linetype = "dashed") +
        geom_vline(xintercept = size_threshold, color = "red", linetype = "dashed") +
        geom_point() +
        geom_text_repel(aes(label = paste(sample, chromosome)), size = 3, max.overlaps = 7) +
        scale_color_brewer(name = "Type", palette = "Set1") +
        scale_x_continuous(limits = c(0,100))+
        theme_minimal() +
        theme(legend.position = "bottom") +
        labs(y = "Normalized Median Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs",
             shape = "Ploidy")  

p1 <- ggMarginal(
    med,
    type = "boxplot",
    margins = "both",
    size = 5,
    groupColour = TRUE,
    groupFill = TRUE
)      
p1
```

### Evaluate difference between Span and Coverage of dupCNVs
```{r, message = FALSE, warning = FALSE}
ggplot(dup_chroms, aes(y = diff_span_cov, x= ""))+
    geom_boxplot(alpha = 0)+
    geom_quasirandom(aes(color = filters, size =n_cnvs))+
    geom_text_repel(aes(label = paste(sample, chromosome)), size = 3, max.overlaps = 5) +
    scale_color_brewer(name = "Filters category", palette = "Dark2") +
    scale_y_continuous(breaks = seq(0,100, by = 5))+
    theme_minimal() +
    theme(legend.position = "right") +
    labs(y = "Difference Between Span and Coverage",
         x = "",
         title = "Distribution of difference between Coverage and Span of dupCNVs")    
```

```{r category thresholds}
#| code-fold: false
difference_threshold = 10
```

```{r create categories}
dup_chroms <- dup_chroms %>%
    mutate(category = case_when(
        diff_span_cov <= difference_threshold ~ "solid",
        diff_span_cov > difference_threshold ~ "gappy",
    ))
```  

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
ggplot(dup_chroms, aes(x = dup_coverage_percent, y = dup_span_percent, color = type, size = n_cnvs, shape = ploidy )) +
        geom_point() +
        scale_x_continuous(labels = scales::comma, limits = c(0,100)) +
        scale_y_continuous(labels = scales::comma, limits = c(0,100)) +
        scale_size_continuous(name = "Number of CNVs", limits = c(1,max(dup_chroms$n_cnvs, na.rm = TRUE)) )+
        geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "lightgray") +
        geom_vline(xintercept = size_threshold, color = "red", linetype = "dashed") +
        scale_color_brewer(name = "Type", palette = "Set1") +
        theme_minimal() +
        theme(legend.position = "right")+
        labs(title = "Percent of Chromosome Spanned by dupCNVs vs Covered by dupCNVs",
            y = "Percent of Chromosome Spanned by dupCNVs",
            x = "Percent of Chromosome Covered by dupCNVs",
            shape = "Ploidy")
```

### Categorize duplications to separate full from partial duplications 

```{r}
#| code-fold: false
difference_threshold = 10
coverage_threshold = 75
```
```{r plot category thresholds, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
ggplot()+theme_minimal()

pl <- ggplot(dup_chroms, aes(y = diff_span_cov, x = dup_coverage_percent, color = type, size = n_cnvs, shape = ploidy)) +
        geom_point() +
        # geom_text_repel(aes(label = sample), size = 3, max.overlaps = 5) +
        geom_hline(yintercept = difference_threshold, linetype = "dashed", color = "red") +
        geom_vline(xintercept = coverage_threshold, linetype = "dashed", color = "red") +
        geom_vline(xintercept = size_threshold, linetype = "dashed", color = "blue") +
        scale_y_reverse(labels = scales::comma, breaks = seq(0, max(dup_chroms$diff_span_cov, na.rm = TRUE), by = 5)) +
        scale_x_continuous(labels = scales::comma, breaks = seq(0, max(dup_chroms$dup_coverage_percent, na.rm = TRUE), by = 5)) +
        scale_size_continuous(name = "Number of\nCNVs")+
        scale_color_brewer(name = "Type", palette = "Set1") +
        theme_minimal() +
        theme(legend.position = "bottom", legend.direction = "vertical")+
        labs(title = "",
            x = "Percent of Chromosome\nCovered by Duplications",
            y = "Difference Span-Coverage",
            shape = "Ploidy")

t<-ggMarginal(
    pl,
    type = "boxplot",
    margins = "both",
    size = 5,
    groupColour = TRUE,
    groupFill = TRUE
)  
t
```  
```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
ggplot()+theme_minimal()

pl <- ggplot(dup_chroms, aes(y = diff_span_cov, x = dup_coverage_percent, color = filters, size = n_cnvs, shape = ploidy)) +
        geom_point() +
        # geom_text_repel(aes(label = sample), size = 3, max.overlaps = 5) +
        geom_hline(yintercept = difference_threshold, linetype = "dashed", color = "red") +
        geom_vline(xintercept = coverage_threshold, linetype = "dashed", color = "red") +
        geom_vline(xintercept = size_threshold, linetype = "dashed", color = "blue") +
        scale_y_reverse(labels = scales::comma, breaks = seq(0, max(dup_chroms$diff_span_cov, na.rm = TRUE), by = 5)) +
        scale_x_continuous(labels = scales::comma, breaks = seq(0, max(dup_chroms$dup_coverage_percent, na.rm = TRUE), by = 5)) +
        scale_size_continuous(name = "Number of\nCNVs")+
        scale_color_brewer(name = "Filters category", palette = "Dark2") +
        theme_minimal() +
        theme(legend.position = "bottom", legend.direction = "vertical")+
        labs(title = "",
            x = "Percent of Chromosome\nCovered by Duplications",
            y = "Difference Span-Coverage",
            shape = "Ploidy")

t<-ggMarginal(
    pl,
    type = "boxplot",
    margins = "both",
    size = 5,
    groupColour = TRUE,
    groupFill = TRUE
)  
t
```  

```{r, message = FALSE, warning = FALSE}
#| fig.height: 7
#| fig.width: 9
ggplot(dup_chroms, aes(x = dup_coverage_percent, y = norm_chrom_median, color = type, shape = category)) +
        geom_hline(yintercept = c(1, 2), color = "black", linetype = "solid") +
        geom_hline(yintercept = depth_threshold, color = "red", linetype = "dashed") +
        geom_vline(xintercept = size_threshold, color = "red", linetype = "dashed") +
        geom_point() +
        scale_color_brewer(name = "Type", palette = "Set1") +
        scale_x_continuous(limits = c(0,100))+
        theme_minimal() +
        theme(legend.position = "bottom") +
        labs(title = "Percent of Chromosome Covered by dupCNVs vs. Depth of Chromosome",
             y = "Normalized Median Depth of Chromosome",
             x = "Percent of Chromosome Covered by dupCNVs",
             shape = "Category")  
```
```{r}
types <- dup_chroms %>%
    group_by(category, filters)%>%
    summarize(n = n(), .groups = "drop")%>%
    arrange(filters, category)%>%
    mutate(group = paste(category, filters, sep = "-")) %>%
    left_join(dup_chroms, by = c("category", "filters"))
```

```{r separate categories}
for (type in types$group){
    assign(type, filter(types, group == type))
}
```

```{r}
types %>%
    select(group, n)%>%
    distinct()
```

```{r make functions to print plots}
image_paths_func <- function(df){
    image_paths <- df %>%
        mutate(depth_by_windows_path = 
                    paste("../../Crypto_", dataset, "/results/01.Samples/plots/", sample, "/depth_by_windows.png", sep = ""),
            distribution_path = 
                    paste("../../Crypto_", dataset, "/results/01.Samples/plots/", sample, "/depth_chrom_distribution.png", sep = ""))

    return(image_paths)
}

print_plots <- function(df){
    for (sample_id in unique(df$sample)){
        dataset_id <- df %>% 
            filter(sample == sample_id) %>% 
            pull(dataset)%>%
            unique()%>%
            as.character()
        depth_by_windows_path <- image_paths %>%
            filter(sample == sample_id) %>% 
            pull(depth_by_windows_path)%>%
            unique()%>%
            as.character()
        distribution_path <- image_paths %>%
            filter(sample == sample_id) %>% 
            pull(distribution_path)%>%
            unique()%>%
            as.character()    
        metrics <- df %>% 
            filter(sample == sample_id)%>%
            select(sample, chromosome, norm_chrom_median, diff_span_cov, dup_coverage_percent, dup_span_percent, mean_cnv_depth, n_cnvs)%>%

            as.data.frame()

        
        cat(paste0( "\n", "### ", sample_id), "\n")
        print(knitr::kable(metrics, row.names = FALSE), row.names = FALSE)
        cat(paste0("![](", depth_by_windows_path, ")", sep =""), "\n")
        # cat(paste0("![](", distribution_path, ")", sep =""), "\n")
    }
}

```

```{r print plots, results = "asis", eval = FALSE}
for (type in unique(types$group)){
    cat(paste0( "\n", "## ", type), "\n")
    number <- types %>%
        select(group, n)%>%
        distinct()%>% 
        filter(group == type)%>%
        select(n)
    cat(paste0( "\n", number,"\n"), "\n")

    cat("<details>")
    cat(paste0( "\n", "<summary>", "Plots", "</summary>"), "\n")
    cat()
    image_paths = image_paths_func(get(type))
    print_plots(get(type))
    cat("</details>")
}
```

## Filter out partial duplications
```{r}
duplications_full <- dup_chroms
```
## Get multiple summary tables


<p style="text-align:center;">**Number of duplicated chromosomes per sample**</p>

```{r,message=FALSE}
dup_sample <- duplications_full %>%
    group_by(dataset,lineage, sample, strain, source) %>%
    summarise(n_chroms = n_distinct(chromosome), 
            chromosomes = paste(chromosome, collapse = ", ")) %>%
    arrange(desc(n_chroms))
dup_sample
```
  

<p style="text-align:center;">**Number of samples with duplications in each group of dataset-lineage-chromosome**</p>

```{r, message=FALSE}
dup_dataset_lineage_chromosome <- duplications_full %>%
    group_by(dataset,lineage, chromosome) %>%
    summarise(n_samples = n_distinct(sample), 
        samples_in_dataset_lineage = first(samples_in_dataset_lineage))%>%
    mutate(percent_samples = round((n_samples / samples_in_dataset_lineage) * 100, 1))%>%
    select(dataset,lineage, chromosome, n_samples, samples_in_dataset_lineage, percent_samples)%>%
    arrange(chromosome, desc(lineage), desc(n_samples))
dup_dataset_lineage_chromosome
```
  

<p style="text-align:center;">**Number of samples with duplications in each group of lineage-chromosome**</p>

```{r,message=FALSE}
dup_lineage_chromosome <- duplications_full%>%
    group_by(lineage, chromosome) %>%
    summarise(n_samples = n_distinct(sample), 
        samples_in_lineage = first(samples_in_lineage))%>%
    mutate(percent_samples = round((n_samples / samples_in_lineage) * 100, 1))%>%
    select(lineage, chromosome, n_samples, samples_in_lineage,percent_samples)%>%
    arrange(chromosome, desc(lineage), desc(n_samples))
dup_lineage_chromosome 
```
  

<p style="text-align:center;">**Number of samples with duplications in each group of lineage-datset**</p>

```{r, message=FALSE}
dup_lineage_dataset <- duplications_full%>%
    group_by(dataset,lineage) %>%
    summarise(n_samples = n_distinct(sample), samples_in_dataset_lineage = first(samples_in_dataset_lineage))%>%
    mutate(percent_samples = round((n_samples / samples_in_dataset_lineage) * 100, 1))%>%
    select(lineage, n_samples, samples_in_dataset_lineage, percent_samples)%>%
    arrange(desc(lineage), desc(n_samples))
dup_lineage_dataset

```
  

<p style="text-align:center;">**Number of samples with duplications in each chromosome**</p>

```{r, message=FALSE}
dup_chromosome <- duplications_full %>%
    group_by(chromosome) %>%
    summarise(n_samples = n_distinct(sample), total_samples = first(total_samples))%>%
    mutate(percent_samples = round((n_samples / total_samples) * 100, 1))%>%
    select(chromosome, n_samples,total_samples, percent_samples)%>%
    arrange(chromosome, desc(n_samples))
dup_chromosome 
```