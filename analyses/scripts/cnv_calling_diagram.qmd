---
title: "Diagram of CNV calling algorith"
author: "Claudia Zirión-Martínez"
date: "2025-04-09"

fig-height: 7
fig-width: 9
format: 
  html:
    page-layout: full
---

```{r, eval=FALSE, echo=FALSE}
setwd("/FastData/czirion/WeavePop_Cneoformans/analyses/")
```
Libraries
```{r, message=FALSE, output = FALSE}
library(tidyverse)
library(ggnewscale)
```
Paths
```{r}
windows_path <- 
    "../Crypto_Ashton/results_clean/04.Intermediate_files/01.Samples/depth_quality/ERS542302/depth_by_windows.tsv"
cnv_path <- 
    "../Crypto_Ashton/results_clean/01.Samples/cnv/ERS542302/cnv_calls.tsv"
repeats_path <- "../Crypto_Ashton/results_clean/03.References/VNI/VNI_repeats.bed"
```

## Depth metrics of windows and CNV regions
```{r, message=FALSE, output = FALSE}
windows <- 
    read.delim(windows_path, sep = "\t", stringsAsFactors = TRUE,
    col.names = c("accession", "start", "end", "depth", "norm_depth", "smooth_norm_depth"))
cnv <- 
    read.delim(cnv_path, sep = "\t", stringsAsFactors = TRUE, header = TRUE)
repeats <- 
    read.delim(repeats_path, sep = "\t", stringsAsFactors = TRUE,
    col.names = c("accession", "start", "end", "type") )
```
Get window size.
```{r}
window_size <- windows[1,3] - windows[1,2]
```

Get a segment of a chromosome with a deletion, a duplication and single-copy fragments.  
```{r}
windows_filtered <- windows %>%
    filter(accession == "CP003824.1")%>%
    filter(start >= 0)%>%
    filter(end <= 80000)
cnv_filtered <- cnv %>%
    filter(accession == "CP003824.1")%>%
    filter(start >= 0)%>%
    filter(end <= 80000)
repeats_filtered <- repeats %>%
        filter(accession == "CP003824.1")%>%
    filter(start >= 0)%>%
    filter(end <= 80000)
```

```{r}
ggplot() +
    geom_segment(data = windows_filtered, aes(y = 6, yend = 6, x = start, xend = end, color = depth), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 5, yend = 5, x = start, xend = end, color = depth), linewidth = 5)+
        scale_color_distiller(palette = "Blues", direction = 1, name = "Depth")+
        new_scale_color()+
    geom_segment(data = windows_filtered, aes(y = 4, yend = 4, x = start, xend = end, color = norm_depth), linewidth = 5) +
    geom_segment(data = windows_filtered, aes(y = 2, yend = 2, x = start, xend = end, color = smooth_norm_depth), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 3, yend = 3, x = start, xend = end, color = norm_depth), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 1, yend = 1, x = start, xend = end, color = smooth_depth), linewidth = 5) +
        scale_color_viridis_c(option = "plasma", direction = -1, name = "Normalized\ndepth")+
        new_scale_color()+
    geom_segment(data = cnv_filtered, aes(y = 0, yend = 0, x = start, xend = start + window_size/2), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 0, yend = 0, x = start, xend = end), linewidth = 1) +
    geom_segment(data = cnv_filtered, aes(y = 0, yend = 0, x = end, xend = end - window_size/2), linewidth = 5) +
    geom_text(data = cnv_filtered, aes(y=0.3, x = (start + (region_size/2)), label = str_to_title(cnv)))+
    geom_segment(data = cnv_filtered, aes(y = -1, yend = -1, x = start, xend = end, color = repeat_fraction), linewidth = 5)+
        scale_color_distiller(palette = "Greens", direction = 1, name = "Repeat fraction")+
    geom_segment(data = repeats_filtered, aes(y = -2, yend = -2, x = start, xend = end), linewidth = 5)+
    scale_y_continuous(
            breaks = c(-2, -1, 0, 1, 2, 3, 4, 5, 6),
            labels = c("Repetitive Sequences", "Repeat Fraction", "CNV Region", "CNV Smooth Norm Depth", "Window Smooth Norm Depth","CNV Normalized Depth", "Window Normalized Depth","CNV Depth","Window Depth"))+
        new_scale_color()+
    labs(title = "Depth metrics of windows and CNVs", 
        subtitle = paste("The CNV metrics are the median of the values of the corresponding windows in the row above them.\nThe windows were called as CNVs using the Window Smooth Norm Depth and then fused into\nthe CNV regions.\nWindow size: ", window_size),
        x="Position", y = "")+
    theme_bw()+
    theme(panel.grid.minor = element_blank(),
            panel.grid.major = element_blank(),
            axis.title.y = element_blank(),
            axis.ticks.y = element_blank(),
            legend.position = "bottom")
```

## Example of CNV where normalized depth and smoothed don't coincide

Paths
```{r}
windows_path <- 
    "../Crypto_Ashton/results_clean/04.Intermediate_files/01.Samples/depth_quality/ERS542554/depth_by_windows.tsv"
cnv_path <- 
    "../Crypto_Ashton/results_clean/01.Samples/cnv/ERS542554/cnv_calls.tsv"
repeats_path <- "../Crypto_Ashton/results_clean/03.References/VNI/VNI_repeats.bed"
```

```{r, message=FALSE, output = FALSE}
windows <- 
    read.delim(windows_path, sep = "\t", stringsAsFactors = TRUE,
    col.names = c("accession", "start", "end", "depth", "norm_depth", "smooth_norm_depth"))
cnv <- 
    read.delim(cnv_path, sep = "\t", stringsAsFactors = TRUE, header = TRUE)
repeats <- 
    read.delim(repeats_path, sep = "\t", stringsAsFactors = TRUE,
    col.names = c("accession", "start", "end", "type") )
```
Get window size.
```{r}
window_size <- windows[1,3] - windows[1,2]
```

Get a segment of a chromosome with a deletion, a duplication and single-copy fragments.  
```{r}
windows_filtered <- windows %>%
    filter(accession == "CP003833.2")%>%
    filter(start >= 930000)%>%
    filter(end <= 1500000)
cnv_filtered <- cnv %>%
    filter(accession == "CP003833.2")%>%
    filter(start >= 930000)%>%
    filter(end <= 1500000)
repeats_filtered <- repeats %>%
    filter(accession == "CP003833.2")%>%
    filter(start >= 930000)%>%
    filter(end <= 1500000)
```

```{r}
ggplot() +
    geom_segment(data = windows_filtered, aes(y = 6, yend = 6, x = start, xend = end, color = depth), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 5, yend = 5, x = start, xend = end, color = depth), linewidth = 5)+
        scale_color_distiller(palette = "Blues", direction = 1, name = "Depth")+
        new_scale_color()+
    geom_segment(data = windows_filtered, aes(y = 4, yend = 4, x = start, xend = end, color = norm_depth), linewidth = 5) +
    geom_segment(data = windows_filtered, aes(y = 2, yend = 2, x = start, xend = end, color = smooth_norm_depth), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 3, yend = 3, x = start, xend = end, color = norm_depth), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 1, yend = 1, x = start, xend = end, color = smooth_depth), linewidth = 5) +
        scale_color_viridis_c(option = "plasma", direction = -1, name = "Normalized\ndepth")+
        new_scale_color()+
    geom_segment(data = cnv_filtered, aes(y = 0, yend = 0, x = start, xend = start + window_size/2), linewidth = 5) +
    geom_segment(data = cnv_filtered, aes(y = 0, yend = 0, x = start, xend = end), linewidth = 1) +
    geom_segment(data = cnv_filtered, aes(y = 0, yend = 0, x = end, xend = end - window_size/2), linewidth = 5) +
    geom_text(data = cnv_filtered, aes(y=0.3, x = (start + (region_size/2)), label = str_to_title(cnv)))+
    geom_segment(data = cnv_filtered, aes(y = -1, yend = -1, x = start, xend = end, color = repeat_fraction), linewidth = 5)+
        scale_color_distiller(palette = "Greens", direction = 1, name = "Repeat fraction")+
    geom_segment(data = repeats_filtered, aes(y = -2, yend = -2, x = start, xend = end), linewidth = 5)+
    scale_y_continuous(
            breaks = c(-2, -1, 0, 1, 2, 3, 4, 5, 6),
            labels = c("Repetitive Sequences", "Repeat Fraction", "CNV Region", "CNV Smooth Norm Depth", "Window Smooth Norm Depth","CNV Normalized Depth", "Window Normalized Depth","CNV Depth","Window Depth"))+
        new_scale_color()+
    labs(title = "Depth metrics of windows and CNVs", 
        subtitle = paste("The CNV metrics are the median of the values of the corresponding windows in the row above them.\nThe windows were called as CNVs using the Window Smooth Norm Depth and then fused into\nthe CNV regions.\nWindow size: ", window_size),
        x="Position", y = "")+
    theme_bw()+
    theme(panel.grid.minor = element_blank(),
            panel.grid.major = element_blank(),
            axis.title.y = element_blank(),
            axis.ticks.y = element_blank(),
            legend.position = "bottom")
```